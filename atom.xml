<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>思米米(SIMIMI)</title>
  
  <subtitle>simimi.cn</subtitle>
  <link href="https://www.simimi.cn/atom.xml" rel="self"/>
  
  <link href="https://www.simimi.cn/"/>
  <updated>2022-06-04T07:27:24.000Z</updated>
  <id>https://www.simimi.cn/</id>
  
  <author>
    <name>Herway</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向 Web 开发人员的 58 个 JavaScript 技巧</title>
    <link href="https://www.simimi.cn/note/js-skills/"/>
    <id>https://www.simimi.cn/note/js-skills/</id>
    <published>2022-06-04T07:27:24.000Z</published>
    <updated>2022-06-04T07:27:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为程序员，编写代码也需要大量的写作技巧。好的代码可以让人耳目一新、通俗易懂、舒适自然，同时又充满成就感。因此，整理了一些近三年使用过的JS开发技巧，希望能让大家写出耳目一新、通俗易懂、舒适自然的代码。</p><h2 id="字符串技巧"><a href="#字符串技巧" class="headerlink" title="字符串技巧"></a>字符串技巧</h2><h3 id="1-Compare-time"><a href="#1-Compare-time" class="headerlink" title="1: Compare time"></a>1: Compare time</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> time1 <span class="token operator">=</span> <span class="token string">"2022-03-02 09:00:00"</span><span class="token punctuation">;</span><span class="token keyword">const</span> time2 <span class="token operator">=</span> <span class="token string">"2022-03-02 09:00:01"</span><span class="token punctuation">;</span><span class="token keyword">const</span> overtime <span class="token operator">=</span> time1 <span class="token operator">&lt;</span> time2<span class="token punctuation">;</span><span class="token comment">// overtime => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Format-money"><a href="#2-Format-money" class="headerlink" title="2: Format money"></a>2: Format money</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">ThousandNum</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=></span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\B(?=(\d&#123;3&#125;)+(?!\d))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token function">ThousandNum</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// money => '1,000,000'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-Generate-random-ID"><a href="#3-Generate-random-ID" class="headerlink" title="3: Generate random ID"></a>3: Generate random ID</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">RandomId</span> <span class="token operator">=</span> <span class="token parameter">len</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">RandomId</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// id => "xdeguewg1f"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="4-Generate-random-HEX-color-values"><a href="#4-Generate-random-HEX-color-values" class="headerlink" title="4: Generate random HEX color values"></a>4: Generate random HEX color values</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">RandomColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"#"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token function">RandomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// color => "#2cbf89"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-Generate-star-ratings"><a href="#5-Generate-star-ratings" class="headerlink" title="5: Generate star ratings"></a>5: Generate star ratings</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">StartScore</span> <span class="token operator">=</span> <span class="token parameter">rate</span> <span class="token operator">=></span> <span class="token string">"★★★★★☆☆☆☆☆"</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> rate<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">-</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">StartScore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// start => '★★★☆☆'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-URL-query-parameters"><a href="#6-URL-query-parameters" class="headerlink" title="6: URL query parameters"></a>6: URL query parameters</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// location.search = "?name=test&amp;sex=man"</span>params<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "man"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="数字技巧"><a href="#数字技巧" class="headerlink" title="数字技巧"></a>数字技巧</h2><h3 id="7-Arrangement"><a href="#7-Arrangement" class="headerlink" title="7: Arrangement"></a>7: Arrangement</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token number">1.19</span><span class="token punctuation">;</span><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token number">2.29</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> num3 <span class="token operator">=</span> <span class="token number">3.09</span> <span class="token operator">>></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// num1 num2 num3 => 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-Zero-padding"><a href="#8-Zero-padding" class="headerlink" title="8: Zero padding"></a>8: Zero padding</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">FillZero</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> len</span><span class="token punctuation">)</span> <span class="token operator">=></span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">FillZero</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// num => "01234"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="9-Revolution-value"><a href="#9-Revolution-value" class="headerlink" title="9: Revolution value"></a>9: Revolution value</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">const</span> num3 <span class="token operator">=</span> <span class="token operator">+</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">const</span> num4 <span class="token operator">=</span> <span class="token operator">+</span><span class="token string">"169"</span><span class="token punctuation">;</span><span class="token comment">// num1 num2 num3 num4 => 0 0 0 169</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-Timestamp"><a href="#10-Timestamp" class="headerlink" title="10: Timestamp"></a>10: Timestamp</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> timestamp <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2022-03-22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// timestamp => 1647907200000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="11-Exact-decimal"><a href="#11-Exact-decimal" class="headerlink" title="11: Exact decimal"></a>11: Exact decimal</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">RoundNum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> decimal</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">**</span> decimal<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">**</span> decimal<span class="token punctuation">;</span><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">RoundNum</span><span class="token punctuation">(</span><span class="token number">1.2345</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// num => 1.23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="12-Parity"><a href="#12-Parity" class="headerlink" title="12: Parity"></a>12: Parity</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">OddEven</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"odd"</span> <span class="token operator">:</span> <span class="token string">"even"</span><span class="token punctuation">;</span><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">OddEven</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// num => "even"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-Take-min-max"><a href="#13-Take-min-max" class="headerlink" title="13: Take min max"></a>13: Take min max</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// min max => 0 3   (0, 1, 2, 3)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-Generate-range-random-numbers"><a href="#14-Generate-range-random-numbers" class="headerlink" title="14: Generate range random numbers"></a>14: Generate range random numbers</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">RandomNum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">RandomNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="布尔技巧"><a href="#布尔技巧" class="headerlink" title="布尔技巧"></a>布尔技巧</h2><h3 id="15-Short-circuit-operator"><a href="#15-Short-circuit-operator" class="headerlink" title="15: Short-circuit operator"></a>15: Short-circuit operator</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> d <span class="token operator">&amp;&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Fake operation, judge from left to right, return a false value when encountering a false value, and no longer execute it later, otherwise return the last true value</span><span class="token keyword">const</span> b <span class="token operator">=</span> d <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Take the true operation, judge from left to right, return the true value when encountering the true value, and do not execute it later, otherwise return the last false value</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token operator">!</span>d<span class="token punctuation">;</span> <span class="token comment">// Returns false if a single expression converts to true, otherwise returns true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="16-Determine-the-data-type"><a href="#16-Determine-the-data-type" class="headerlink" title="16: Determine the data type"></a>16: Determine the data type</h3><p>可确定的类型：undefined、null、string、number、boolean、array、object、symbol、date、regexp、function、asyncfunction、arguments、set、map、weakset、weakmap</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">DataType</span><span class="token punctuation">(</span><span class="token parameter">tgt<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> dataType <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>tgt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\[object (\w+)\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> type <span class="token operator">?</span> dataType <span class="token operator">===</span> type <span class="token operator">:</span> dataType<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">DataType</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "string"</span><span class="token function">DataType</span><span class="token punctuation">(</span><span class="token number">20220314</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "number"</span><span class="token function">DataType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "boolean"</span><span class="token function">DataType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"array"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">DataType</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"array"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-Check-if-array-is-empty"><a href="#17-Check-if-array-is-empty" class="headerlink" title="17: Check if array is empty"></a>17: Check if array is empty</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> flag <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">// flag => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="18-Execute-when-conditions-are-met"><a href="#18-Execute-when-conditions-are-met" class="headerlink" title="18: Execute when conditions are met"></a>18: Execute when conditions are met</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> flagA <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Condition A</span><span class="token keyword">const</span> flagB <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// Condition B</span><span class="token punctuation">(</span>flagA <span class="token operator">||</span> flagB<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Execute when A or B is satisfied</span><span class="token punctuation">(</span>flagA <span class="token operator">||</span> <span class="token operator">!</span>flagB<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Execute when A is satisfied or B is not satisfied</span>flagA <span class="token operator">&amp;&amp;</span> flagB <span class="token operator">&amp;&amp;</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Execute when both A and B are satisfied</span>flagA <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>flagB <span class="token operator">&amp;&amp;</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Execute when A is satisfied and B is not satisfied</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-Executed-if-non-false"><a href="#19-Executed-if-non-false" class="headerlink" title="19: Executed if non-false"></a>19: Executed if non-false</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// undefined、null、""、0、false、NaN</span><span class="token operator">!</span>flag <span class="token operator">&amp;&amp;</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="20-Executed-when-the-array-is-not-empty"><a href="#20-Executed-when-the-array-is-not-empty" class="headerlink" title="20: Executed when the array is not empty"></a>20: Executed when the array is not empty</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="21-Executed-when-the-object-is-not-null"><a href="#21-Executed-when-the-object-is-not-null" class="headerlink" title="21: Executed when the object is not null"></a>21: Executed when the object is not null</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数组技巧"><a href="#数组技巧" class="headerlink" title="数组技巧"></a>数组技巧</h2><h3 id="22-Clone-array"><a href="#22-Clone-array" class="headerlink" title="22: Clone array"></a>22: Clone array</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> _arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>_arr<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// arr => [0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="23-Merge-array"><a href="#23-Merge-array" class="headerlink" title="23: Merge array"></a>23: Merge array</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// arr => [0, 1, 2, 3, 4, 5];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="24-Deduplicated-array"><a href="#24-Deduplicated-array" class="headerlink" title="24: Deduplicated array"></a>24: Deduplicated array</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// arr => [0, 1, null]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="25-Obfuscated-array"><a href="#25-Obfuscated-array" class="headerlink" title="25: Obfuscated array"></a>25: Obfuscated array</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// arr => [3, 4, 0, 5, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="26-Empty-an-array"><a href="#26-Empty-an-array" class="headerlink" title="26: Empty an array"></a>26: Empty an array</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// arr => []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="27-Truncate-array"><a href="#27-Truncate-array" class="headerlink" title="27: Truncate array"></a>27: Truncate array</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// arr => [0, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="28-Exchange-assignment"><a href="#28-Exchange-assignment" class="headerlink" title="28: Exchange assignment"></a>28: Exchange assignment</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// a b => 1 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="29-Filter-empty-values"><a href="#29-Filter-empty-values" class="headerlink" title="29: Filter empty values"></a>29: Filter empty values</h3><p>Empty values: undefined,null,””,0,false,NaN</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// arr => [1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="30-Insert-member-at-the-beginning-of-the-array"><a href="#30-Insert-member-at-the-beginning-of-the-array" class="headerlink" title="30: Insert member at the beginning of the array"></a>30: Insert member at the beginning of the array</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// arr => [0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="31-Insert-members-at-the-end-of-the-array"><a href="#31-Insert-members-at-the-end-of-the-array" class="headerlink" title="31: Insert members at the end of the array"></a>31: Insert members at the end of the array</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// arr => [0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="32-Count-number-of-array-members"><a href="#32-Count-number-of-array-members" class="headerlink" title="32: Count number of array members"></a>32: Count number of array members</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> count <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    t<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">++</span>t<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// count => &#123; 0: 1, 1: 2, 2: 3 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="33-Destructuring-nested-array-members"><a href="#33-Destructuring-nested-array-members" class="headerlink" title="33: Destructuring nested array members"></a>33: Destructuring nested array members</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">[</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token punctuation">[</span>e<span class="token punctuation">,</span> f<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment">// a b c d e f => 0 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="34-Destructuring-array-member-aliases"><a href="#34-Destructuring-array-member-aliases" class="headerlink" title="34: Destructuring array member aliases"></a>34: Destructuring array member aliases</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token operator">:</span> a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> c<span class="token punctuation">&#125;</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment">// a b c => 0 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="35-Destructuring-array-member-default-value"><a href="#35-Destructuring-array-member-default-value" class="headerlink" title="35: Destructuring array member default value"></a>35: Destructuring array member default value</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment">// a b c d => 0 1 2 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="36-Get-random-array-member"><a href="#36-Get-random-array-member" class="headerlink" title="36: Get random array member"></a>36: Get random array member</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> randomItem <span class="token operator">=</span> arr<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// randomItem => 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="37-Create-an-array-of-specified-length"><a href="#37-Create-an-array-of-specified-length" class="headerlink" title="37: Create an array of specified length"></a>37: Create an array of specified length</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// arr => [0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="38-Creates-an-array-of-the-specified-length-and-equal-values"><a href="#38-Creates-an-array-of-the-specified-length-and-equal-values" class="headerlink" title="38: Creates an array of the specified length and equal values"></a>38: Creates an array of the specified length and equal values</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// arr => [0, 0, 0]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="对象技巧"><a href="#对象技巧" class="headerlink" title="对象技巧"></a>对象技巧</h2><h3 id="39-Clone-object"><a href="#39-Clone-object" class="headerlink" title="39: Clone object"></a>39: Clone object</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> _obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>_obj<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>_obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// obj => &#123; a: 0, b: 1, c: 2 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="40-Merge-objects"><a href="#40-Merge-objects" class="headerlink" title="40: Merge objects"></a>40: Merge objects</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token operator">...</span>obj2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// obj => &#123; a: 0, b: 1, c: 3, d: 4, e: 5 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="41-Object-Variable-Properties"><a href="#41-Object-Variable-Properties" class="headerlink" title="41: Object Variable Properties"></a>41: Object Variable Properties</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>flag <span class="token operator">?</span> <span class="token string">"c"</span> <span class="token operator">:</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// obj => &#123; a: 0, b: 1, d: 2 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="42-Create-a-pure-empty-object"><a href="#42-Create-a-pure-empty-object" class="headerlink" title="42: Create a pure empty object"></a>42: Create a pure empty object</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// obj => &#123;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="43-Delete-object-useless-properties"><a href="#43-Delete-object-useless-properties" class="headerlink" title="43: Delete object useless properties"></a>43: Delete object useless properties</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment">// rest => &#123; b: 1, c: 2 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="44-Destructuring-object-property-nesting"><a href="#44-Destructuring-object-property-nesting" class="headerlink" title="44: Destructuring object property nesting"></a>44: Destructuring object property nesting</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>d<span class="token punctuation">,</span> e<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment">// d e => 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="45-Destructuring-object-property-aliases"><a href="#45-Destructuring-object-property-aliases" class="headerlink" title="45: Destructuring object property aliases"></a>45: Destructuring object property aliases</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> d<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> e<span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment">// a d e => 0 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="46-Destructuring-object-property-default-values"><a href="#46-Destructuring-object-property-default-values" class="headerlink" title="46: Destructuring object property default values"></a>46: Destructuring object property default values</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment">// a b d => 0 1 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="函数技巧"><a href="#函数技巧" class="headerlink" title="函数技巧"></a>函数技巧</h2><h3 id="47-Function-self-execution"><a href="#47-Function-self-execution" class="headerlink" title="47: Function self-execution"></a>47: Function self-execution</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">Func</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Commonly used</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Commonly used</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Commonly used</span><span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span> <span class="token operator">^</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span> <span class="token operator">></span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="48-One-time-function"><a href="#48-One-time-function" class="headerlink" title="48: One-time function"></a>48: One-time function</h3><p>适合运行一些只需要执行一次的初始化代码，如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function-variable function">Func</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="49-Lazy-loading-functions"><a href="#49-Lazy-loading-functions" class="headerlink" title="49: Lazy loading functions"></a>49: Lazy loading functions</h3><p>当函数中的复杂判断分支越来越多时，可以大大节省资源开销，可以使用闭包来实现。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// replace with</span><span class="token keyword">function</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">Func</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">Func</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="50-Detect-non-null-parameters"><a href="#50-Detect-non-null-parameters" class="headerlink" title="50: Detect non-null parameters"></a>50: Detect non-null parameters</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"param is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token parameter">name <span class="token operator">=</span> <span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I Love "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "param is required"</span><span class="token function">Func</span><span class="token punctuation">(</span><span class="token string">"You"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "I Love You"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="51-String-creation-function"><a href="#51-String-creation-function" class="headerlink" title="51: String creation function"></a>51: String creation function</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"console.log(\"I Love \" + name)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="52-Handle-error-messages-gracefully"><a href="#52-Handle-error-messages-gracefully" class="headerlink" title="52: Handle error messages gracefully"></a>52: Handle error messages gracefully</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"https://stackoverflow.com/search?q=[js]+"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="53-Handle-Async-Await-parameters-gracefully"><a href="#53-Handle-Async-Await-parameters-gracefully" class="headerlink" title="53: Handle Async/Await parameters gracefully"></a>53: Handle <code>Async/Await</code> parameters gracefully</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">AsyncTo</span><span class="token punctuation">(</span><span class="token parameter">promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">[</span>err<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>err<span class="token punctuation">,</span> res<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">AsyncTo</span><span class="token punctuation">(</span><span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="54-Handle-multiple-function-return-values-gracefully"><a href="#54-Handle-multiple-function-return-values-gracefully" class="headerlink" title="54: Handle multiple function return values gracefully"></a>54: Handle multiple function return values gracefully</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/comment"</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> comment<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM技巧"><a href="#DOM技巧" class="headerlink" title="DOM技巧"></a>DOM技巧</h2><h3 id="55-Show-all-DOM-borders"><a href="#55-Show-all-DOM-borders" class="headerlink" title="55: Show all DOM borders"></a>55: Show all DOM borders</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">$$</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">dom</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>outline <span class="token operator">=</span> <span class="token string">"1px solid #"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="56-Responsive-pages"><a href="#56-Responsive-pages" class="headerlink" title="56: Responsive pages"></a>56: Responsive pages</h3><p>页面基于设计图但需要适配多个模型，元素大小使用<code>rem</code>设置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">AutoResponse</span><span class="token punctuation">(</span><span class="token parameter">width <span class="token operator">=</span> <span class="token number">750</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>    target<span class="token punctuation">.</span>clientWidth <span class="token operator">>=</span> <span class="token number">600</span>        <span class="token operator">?</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">"80px"</span><span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> target<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> width <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="57-Filter-XSS"><a href="#57-Filter-XSS" class="headerlink" title="57: Filter XSS"></a>57: Filter XSS</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">FilterXss</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    elem<span class="token punctuation">.</span>innerText <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> elem<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    elem <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="58-Access-LocalStorage"><a href="#58-Access-LocalStorage" class="headerlink" title="58: Access LocalStorage"></a>58: Access LocalStorage</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> love <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"love"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"love"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"I Love You"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为程序员，编写代码也需要大量的写作技巧。好的代码可以让人耳目一新、通俗易懂、舒适自然，同时又充满成就感。因此，整理了一些近三年使用过的JS开发技巧，希望能让大家写出耳目一新、通俗易懂、舒适自然的代码。&lt;/p&gt;
&lt;h2 id=&quot;字符串技巧&quot;&gt;&lt;a href=&quot;#字符串技巧&quot; class=&quot;headerlink&quot; title=&quot;字符串技巧&quot;&gt;&lt;/a&gt;字符串技巧&lt;/h2&gt;&lt;h3 id=&quot;1-Compare-time&quot;&gt;&lt;a href=&quot;#1-Compare-time&quot; class=&quot;headerlink&quot; title=&quot;1: Compare time&quot;&gt;&lt;/a&gt;1: Compare time&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; time1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2022-03-02 09:00:00&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; time2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2022-03-02 09:00:01&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; overtime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; time1 &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; time2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// overtime =&gt; true&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;2-Format-money&quot;&gt;&lt;a href=&quot;#2-Format-money&quot; class=&quot;headerlink&quot; title=&quot;2: Format money&quot;&gt;&lt;/a&gt;2: Format money&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ThousandNum&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\B(?=(\d&amp;#123;3&amp;#125;)+(?!\d))&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; money &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ThousandNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// money =&gt; &#39;1,000,000&#39;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;3-Generate-random-ID&quot;&gt;&lt;a href=&quot;#3-Generate-random-ID&quot; class=&quot;headerlink&quot; title=&quot;3: Generate random ID&quot;&gt;&lt;/a&gt;3: Generate random ID&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;RandomId&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; len&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;RandomId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// id =&gt; &quot;xdeguewg1f&quot;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="https://www.simimi.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端开发规范：命名规范、html规范、css规范、js规范</title>
    <link href="https://www.simimi.cn/note/web-norm/"/>
    <id>https://www.simimi.cn/note/web-norm/</id>
    <published>2022-06-01T06:52:13.000Z</published>
    <updated>2022-06-01T06:52:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端开发规范：命名规范、html规范、css规范、js规范"><a href="#前端开发规范：命名规范、html规范、css规范、js规范" class="headerlink" title="前端开发规范：命名规范、html规范、css规范、js规范"></a>前端开发规范：命名规范、html规范、css规范、js规范</h2><p>一个好的程序员肯定是要能书写可维护的代码，而不是一次性的代码，怎么能让团队当中其他人甚至一段时间时候你再看你某个时候写的代码也能看懂呢，这就需要规范你的代码了。</p><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><h3 id="驼峰式命名法介绍"><a href="#驼峰式命名法介绍" class="headerlink" title="驼峰式命名法介绍"></a>驼峰式命名法介绍</h3><ul><li><p>Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo</p></li><li><p>Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo</p></li></ul><span id="more"></span><h3 id="文件资源命名"><a href="#文件资源命名" class="headerlink" title="文件资源命名"></a>文件资源命名</h3><ul><li><p>文件名不得含有空格</p></li><li><p>文件名建议只使用小写字母，不使用大写字母。( 为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。 )</p></li><li><p>文件名包含多个单词时，单词之间建议使用半角的连词线 ( - ) 分隔。</p></li><li><p>引入资源使用相对路径，不要指定资源所带的具体协议 ( <code>http:</code>,<code>https:</code> ) ，除非这两者协议都不可用。</p></li></ul><p>不推荐：</p><pre class="line-numbers language-none"><code class="language-none">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;cdn.com&#x2F;foundation.min.js&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推荐</p><pre class="line-numbers language-none"><code class="language-none">&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.com&#x2F;foundation.min.js&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p><strong>命名方式</strong> : 小驼峰式命名方法<br><strong>命名规范</strong> : 类型+对象描述的方式，如果没有明确的类型，就可以使前缀为名词</p><table><thead><tr><th>类型</th><th>小写字母</th></tr></thead><tbody><tr><td>array</td><td>a</td></tr><tr><td>boolean</td><td>b</td></tr><tr><td>function</td><td>fn</td></tr><tr><td>int</td><td>i</td></tr><tr><td>object</td><td>o</td></tr><tr><td>regular</td><td>r</td></tr><tr><td>string</td><td>s</td></tr></tbody></table><p>推荐</p><pre class="line-numbers language-none"><code class="language-none">let tableTitle &#x3D; &quot;LoginTable&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不推荐</p><pre class="line-numbers language-none"><code class="language-none">let getTitle &#x3D; &quot;LoginTable&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>命名方式</strong> : 小驼峰方式 ( 构造函数使用大驼峰命名法 )<br><strong>命名规则</strong> : 前缀为动词</p><table><thead><tr><th>动词</th><th>含义</th><th>返回值</th></tr></thead><tbody><tr><td>can</td><td>判断是否可执行某个动作 ( 权限 )</td><td>函数返回一个布尔值。true：可执行；false：不可执行</td></tr><tr><td>has</td><td>判断是否含有某个值</td><td>函数返回一个布尔值。true：含有此值；false：不含有此值</td></tr><tr><td>is</td><td>判断是否为某个值</td><td>函数返回一个布尔值。true：为某个值；false：不为某个值</td></tr><tr><td>get</td><td>获取某个值</td><td>函数返回一个非布尔值</td></tr><tr><td>set</td><td>设置某个值</td><td>无返回值、返回是否设置成功或者返回链式对象</td></tr></tbody></table><p>推荐：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;是否可阅读function canRead()&#123;    return true;&#125;&#x2F;&#x2F;获取姓名function getName&#123;    return this.name&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><strong>命名方法</strong> : 全部大写<br><strong>命名规范</strong> : 使用大写字母和下划线来组合命名，下划线用以分割单词。<br>推荐：</p><pre class="line-numbers language-none"><code class="language-none">const MAX_COUNT &#x3D; 10;const URL &#x3D; &#39;http:&#x2F;&#x2F;www.baidu.com&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="类的成员"><a href="#类的成员" class="headerlink" title="类的成员"></a>类的成员</h2><ul><li>公共属性和方法 : 同变量命名方式</li><li>私有属性和方法 : 前缀为下划线(_)后面跟公共属性和方法一样的命名方式</li></ul><p>推荐(将<code>name</code>换成<code>this</code>是不是更熟悉了呢)</p><pre class="line-numbers language-none"><code class="language-none">function Student(name) &#123;    let _name &#x3D; name; &#x2F;&#x2F; 私有成员    &#x2F;&#x2F; 公共方法    this.getName &#x3D; function () &#123;        return _name;    &#125;    &#x2F;&#x2F; 公共方式    this.setName &#x3D; function (value) &#123;        _name &#x3D; value;    &#125;&#125;let st &#x3D; new Student(&#39;tom&#39;);st.setName(&#39;jerry&#39;);console.log(st.getName()); &#x2F;&#x2F; &#x3D;&gt; jerry：输出_name私有变量的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><h3 id="单行注释-x2F-x2F"><a href="#单行注释-x2F-x2F" class="headerlink" title="单行注释 ( &#x2F;&#x2F; )"></a>单行注释 ( &#x2F;&#x2F; )</h3><ul><li>单独一行：&#x2F;&#x2F;(双斜线)与注释文字之间保留一个空格</li><li>在代码后面添加注释：&#x2F;&#x2F;(双斜线)与代码之间保留一个空格，并且&#x2F;&#x2F;(双斜线)与注释文字之间保留一个空格。</li><li>注释代码：&#x2F;&#x2F;(双斜线)与代码之间保留一个空格。</li></ul><p>推荐 : </p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 调用了一个函数；1)单独在一行setTitle();let maxCount &#x3D; 10; &#x2F;&#x2F; 设置最大量；2)在代码后面注释&#x2F;&#x2F; setName(); &#x2F;&#x2F; 3)注释代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多行注释-x2F-注释说明-x2F"><a href="#多行注释-x2F-注释说明-x2F" class="headerlink" title="多行注释 ( &#x2F; 注释说明 &#x2F; )"></a>多行注释 ( &#x2F; <em>注释说明</em> &#x2F; )</h3><ul><li><p>若开始(&#x2F;<code>*</code>和结束(<code>*</code>&#x2F;)都在一行，推荐采用单行注释</p></li><li><p>若至少三行注释时，第一行为&#x2F;<code>*</code>，最后行为<code>*</code>&#x2F;，其他行以<code>*</code>开始，并且注释文字与<code>*</code>保留一个空格。</p><p>推荐 : </p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** 代码执行到这里后会调用setTitle()函数* setTitle()：设置title的值*&#x2F;setTitle();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="函数-方法-注释"><a href="#函数-方法-注释" class="headerlink" title="函数 ( 方法 ) 注释"></a>函数 ( 方法 ) 注释</h3><p>函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 <a href="https://baike.baidu.com/item/javadoc">javadoc(百度百科)</a><br>语法：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * 函数说明 * @关键字 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用注释关键字</p><table><thead><tr><th>注释名</th><th>语法</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>@param</td><td>@param 参数名 {参数类型}  描述信息</td><td>描述参数的信息</td><td>@param name {String} 传入名称</td></tr><tr><td>@return</td><td>@return {返回类型} 描述信息</td><td>描述返回值的信息</td><td>@return {Boolean} true:可执行;false:不可执行</td></tr><tr><td>@author</td><td>@author 作者信息 [附属信息：如邮箱、日期]</td><td>描述此函数作者的信息</td><td>@author 张三 2015&#x2F;07&#x2F;21</td></tr><tr><td>@version</td><td>@version XX.XX.XX</td><td>描述此函数的版本号</td><td>@version 1.0.3</td></tr><tr><td>@example</td><td>@example 示例代码</td><td>@example setTitle(‘测试’)</td><td>如下</td></tr></tbody></table><p>推荐 :</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** - 合并Grid的行 - @param grid &#123;Ext.Grid.Panel&#125; 需要合并的Grid - @param cols &#123;Array&#125; 需要合并列的Index(序号)数组；从0开始计数，序号也包含。 - @param isAllSome &#123;Boolean&#125; ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样 - @return void - @author polk6 2015&#x2F;07&#x2F;21  - @example - _________________                             _________________ - |  年龄 |  姓名 |                             |  年龄 |  姓名 | - -----------------      mergeCells(grid,[0])   ----------------- - |  18   |  张三 |              &#x3D;&gt;             |       |  张三 | - -----------------                             -  18   --------- - |  18   |  王五 |                             |       |  王五 | - -----------------                             -----------------*&#x2F;function mergeCells(grid, cols, isAllSome) &#123;    &#x2F;&#x2F; Do Something&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTML规范"><a href="#HTML规范" class="headerlink" title="HTML规范"></a>HTML规范</h2><h3 id="文档规范"><a href="#文档规范" class="headerlink" title="文档规范"></a>文档规范</h3><p>使用 HTML5 的文档声明类型 : <code>&lt;!DOCTYPE html&gt;</code></p><ul><li>DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。</li><li>使用文档声明类型的作用是为了防止开启浏览器的怪异模式。 </li><li>没有DOCTYPE文档类型声明会开启浏览器的怪异模式，浏览器会按照自己的解析方式渲染页面，在不同的浏览器下面会有不同的样式。</li><li>如果你的页面添加了&lt;!DOCTYP&gt;那么，那么就等同于开启了标准模式。浏览器会按照W3C标准解析渲染页面。</li></ul><h3 id="脚本加载"><a href="#脚本加载" class="headerlink" title="脚本加载"></a>脚本加载</h3><p>说到js和css的位置，大家应该都知道js放在下面，css放在上面。<br>但是，如果你的项目只需要兼容ie10+或者只是在移动端访问，那么可以使用HTML5的新属性<code>async</code>，将脚本文件放在<code>&lt;head&gt;</code>内<br><strong>兼容老旧浏览器(IE9-)时</strong>：<br>脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。<br><strong>而在现代浏览器中</strong>：<br>脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。<br>综上所述，<br>所有浏览器中推荐:</p><pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;  &lt;head&gt;    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;main.css&quot;&gt;  &lt;&#x2F;head&gt;  &lt;body&gt;    &lt;!-- body goes here --&gt;    &lt;script src&#x3D;&quot;main.js&quot; async&gt;&lt;&#x2F;script&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只兼容现代浏览器推荐:</p><pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;  &lt;head&gt;    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;main.css&quot;&gt;    &lt;script src&#x3D;&quot;main.js&quot; async&gt;&lt;&#x2F;script&gt;  &lt;&#x2F;head&gt;  &lt;body&gt;    &lt;!-- body goes here --&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h3><p>我们一直都在说语义化编程，语义化编程，但是在代码中很少有人完全使用正确的元素。使用语义化标签也是有理由SEO的。</p><blockquote><p>语义化是指：根据元素其被创造出来时的初始意义来使用它。<br>意思就是用正确的标签干正确的事，而不是只有<code>div</code>和<code>span</code>。</p></blockquote><p>不推荐：</p><pre class="line-numbers language-none"><code class="language-none">&lt;b&gt;My page title&lt;&#x2F;b&gt;&lt;div class&#x3D;&quot;top-navigation&quot;&gt;  &lt;div class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#home&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;  &lt;div class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#news&quot;&gt;News&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;  &lt;div class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#about&quot;&gt;About&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;news-page&quot;&gt;  &lt;div class&#x3D;&quot;page-section news&quot;&gt;    &lt;div class&#x3D;&quot;title&quot;&gt;All news articles&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;news-article&quot;&gt;      &lt;h2&gt;Bad article&lt;&#x2F;h2&gt;      &lt;div class&#x3D;&quot;intro&quot;&gt;Introduction sub-title&lt;&#x2F;div&gt;      &lt;div class&#x3D;&quot;content&quot;&gt;This is a very bad example for HTML semantics&lt;&#x2F;div&gt;      &lt;div class&#x3D;&quot;article-side-notes&quot;&gt;I think I&#39;m more on the side and should not receive the main credits&lt;&#x2F;div&gt;      &lt;div class&#x3D;&quot;article-foot-notes&quot;&gt;        This article was created by David &lt;div class&#x3D;&quot;time&quot;&gt;2014-01-01 00:00&lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;section-footer&quot;&gt;      Related sections: Events, Public holidays    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;page-footer&quot;&gt;  Copyright 2014&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐</p><pre class="line-numbers language-none"><code class="language-none">html 代码:&lt;!-- The page header should go into a header element --&gt;&lt;header&gt;  &lt;!-- As this title belongs to the page structure it&#39;s a heading and h1 should be used --&gt;  &lt;h1&gt;My page title&lt;&#x2F;h1&gt;&lt;&#x2F;header&gt;&lt;!-- All navigation should go into a nav element --&gt;&lt;nav class&#x3D;&quot;top-navigation&quot;&gt;  &lt;!-- A listing of elements should always go to UL (OL for ordered listings) --&gt;  &lt;ul&gt;    &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#home&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;    &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#news&quot;&gt;News&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;    &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#about&quot;&gt;About&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;  &lt;&#x2F;ul&gt;&lt;&#x2F;nav&gt;&lt;!-- The main part of the page should go into a main element (also use role&#x3D;&quot;main&quot; for accessibility) --&gt;&lt;main class&#x3D;&quot;news-page&quot; role&#x3D;&quot;main&quot;&gt;  &lt;!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. --&gt;  &lt;section class&#x3D;&quot;page-section news&quot;&gt;    &lt;!-- A section header should go into a section element --&gt;    &lt;header&gt;      &lt;!-- As a page section belongs to the page structure heading elements should be used (in this case h2) --&gt;      &lt;h2 class&#x3D;&quot;title&quot;&gt;All news articles&lt;&#x2F;h2&gt;    &lt;&#x2F;header&gt;    &lt;!-- If a section &#x2F; module can be seen as an article (news article, blog entry, products teaser, any other     re-usable module &#x2F; section that can occur multiple times on a page) a article element should be used --&gt;    &lt;article class&#x3D;&quot;news-article&quot;&gt;      &lt;!-- An article can contain a header that contains the summary &#x2F; introduction information of the article --&gt;      &lt;header&gt;        &lt;!-- As a article title does not belong to the overall page structure there should not be any heading tag! --&gt;        &lt;div class&#x3D;&quot;article-title&quot;&gt;Good article&lt;&#x2F;div&gt;        &lt;!-- Small can optionally be used to reduce importance --&gt;        &lt;small class&#x3D;&quot;intro&quot;&gt;Introduction sub-title&lt;&#x2F;small&gt;      &lt;&#x2F;header&gt;      &lt;!-- For the main content in a section or article there is no semantic element --&gt;      &lt;div class&#x3D;&quot;content&quot;&gt;        &lt;p&gt;This is a good example for HTML semantics&lt;&#x2F;p&gt;      &lt;&#x2F;div&gt;      &lt;!-- For content that is represented as side note or less important information in a given context use aside --&gt;      &lt;aside class&#x3D;&quot;article-side-notes&quot;&gt;        &lt;p&gt;I think I&#39;m more on the side and should not receive the main credits&lt;&#x2F;p&gt;      &lt;&#x2F;aside&gt;      &lt;!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element --&gt;      &lt;footer class&#x3D;&quot;article-foot-notes&quot;&gt;        &lt;!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time         while the actual text in the time element can also be more human readable &#x2F; relative --&gt;        &lt;p&gt;This article was created by David &lt;time datetime&#x3D;&quot;2014-01-01 00:00&quot; class&#x3D;&quot;time&quot;&gt;1 month ago&lt;&#x2F;time&gt;&lt;&#x2F;p&gt;      &lt;&#x2F;footer&gt;    &lt;&#x2F;article&gt;    &lt;!-- In a section, footnotes or similar information can also go into a footer element --&gt;    &lt;footer class&#x3D;&quot;section-footer&quot;&gt;      &lt;p&gt;Related sections: Events, Public holidays&lt;&#x2F;p&gt;    &lt;&#x2F;footer&gt;  &lt;&#x2F;section&gt;&lt;&#x2F;main&gt;&lt;!-- Your page footer should go into a global footer element --&gt;&lt;footer class&#x3D;&quot;page-footer&quot;&gt;  Copyright 2014&lt;&#x2F;footer&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="alt标签不为空"><a href="#alt标签不为空" class="headerlink" title="alt标签不为空"></a>alt标签不为空</h3><p><img>标签的 alt 属性指定了替代文本，用于在图像无法显示或者用户禁用图像显示时，代替图像显示在浏览器中的内容。假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：</p loading="lazy"><ul><li>网速太慢</li><li>src 属性中的错误</li><li>浏览器禁用图像</li><li>用户使用的是屏幕阅读器</li></ul><p>从SEO角度考虑，浏览器的爬虫爬不到图片的内容，所以我们要有文字告诉爬虫图片的内容</p><h2 id="结构、表现、行为三者分离"><a href="#结构、表现、行为三者分离" class="headerlink" title="结构、表现、行为三者分离"></a>结构、表现、行为三者分离</h2><p>尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。<br>在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。<br>建议：</p><ul><li>不使用超过一到两张样式表</li><li>不使用超过一到两个脚本（学会用合并脚本）</li><li>不使用行内样式（<code>&lt;style&gt;.no-good &#123;&#125;&lt;/style&gt;</code>）</li><li>不在元素上使用 style 属性（<code>&lt;hr style=&quot;border-top: 5px solid black&quot;&gt;</code>）</li><li>不使用行内脚本（<code>&lt;script&gt;alert(&#39;no good&#39;)&lt;/script&gt;</code>）</li><li>不使用表象元素（<code>i.e. &lt;b&gt;, &lt;u&gt;, &lt;center&gt;, &lt;font&gt;, &lt;b&gt;</code>）</li><li>不使用表象 class 名（<code>i.e. red, left, center</code>）</li></ul><h3 id="HTML只关注内容"><a href="#HTML只关注内容" class="headerlink" title="HTML只关注内容"></a>HTML只关注内容</h3><ul><li>HTML只显示展示内容信息</li><li>不要引入一些特定的 HTML 结构来解决一些视觉设计问题</li><li>不要将<code>img</code>元素当做专门用来做视觉设计的元素</li><li>样式上的问题应该使用css解决</li></ul><p>不推荐：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- We should not introduce an additional element just to solve a design problem  --&gt;&lt;span class&#x3D;&quot;text-box&quot;&gt;  &lt;span class&#x3D;&quot;square&quot;&gt;&lt;&#x2F;span&gt;  See the square next to me?&lt;&#x2F;span&gt;css 代码:.text-box &gt; .square &#123;  display: inline-block;  width: 1rem;  height: 1rem;  background-color: red;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐</p><pre class="line-numbers language-none"><code class="language-none">html 代码:&lt;!-- That&#39;s clean markup! --&gt;&lt;span class&#x3D;&quot;text-box&quot;&gt;  See the square next to me?&lt;&#x2F;span&gt;css 代码:&#x2F;* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content *&#x2F;.text-box:before &#123;  content: &quot;&quot;;  display: inline-block;  width: 1rem;  height: 1rem;  background-color: red;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。</strong></p><p>不推荐</p><pre class="line-numbers language-none"><code class="language-none">html 代码:&lt;!-- Content images should never be used for design elements!  --&gt;&lt;span class&#x3D;&quot;text-box&quot;&gt;  &lt;img src&#x3D;&quot;square.svg&quot; alt&#x3D;&quot;Square&quot; &#x2F;&gt;  See the square next to me?&lt;&#x2F;span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐</p><pre class="line-numbers language-none"><code class="language-none">html 代码:&lt;!-- That&#39;s clean markup! --&gt;&lt;span class&#x3D;&quot;text-box&quot;&gt;  See the square next to me?&lt;&#x2F;span&gt;css 代码:&#x2F;* We use a :before pseudo element with a background image to solve the problem *&#x2F;.text-box:before &#123;  content: &quot;&quot;;  display: inline-block;  width: 1rem;  height: 1rem;  background: url(square.svg) no-repeat;  background-size: 100%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js规范"><a href="#js规范" class="headerlink" title="js规范"></a>js规范</h2><h3 id="避免全局命名空间污染"><a href="#避免全局命名空间污染" class="headerlink" title="避免全局命名空间污染"></a>避免全局命名空间污染</h3><p>防止全局命名空间被污染，我们通常的做法是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，创建独立隔绝的定义域。也使得内存在执行完后立即释放。</p><p>IIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。<br>不推荐:</p><pre class="line-numbers language-none"><code class="language-none">let x &#x3D; 10,    y &#x3D; 100;&#x2F;&#x2F; Declaring letiables in the global scope is resulting in global scope pollution. All letiables declared like this&#x2F;&#x2F; will be stored in the window object. This is very unclean and needs to be avoided.console.log(window.x + &#39; &#39; + window.y);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; We declare a IIFE and pass parameters into the function that we will use from the global space(function(log, w, undefined)&#123;  &#39;use strict&#39;;  let x &#x3D; 10,      y &#x3D; 100;  &#x2F;&#x2F; Will output &#39;true true&#39;  log((w.x &#x3D;&#x3D;&#x3D; undefined) + &#39; &#39; + (w.y &#x3D;&#x3D;&#x3D; undefined));&#125;(window.console.log, window));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐的IIFE写法:</p><pre class="line-numbers language-none"><code class="language-none">(function()&#123;  &#39;use strict&#39;;  &#x2F;&#x2F; Code goes here&#125;());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：</p><pre class="line-numbers language-none"><code class="language-none">(function($, w, d)&#123;  &#39;use strict&#39;;  $(function() &#123;    w.alert(d.querySelectorAll(&#39;div&#39;).length);  &#125;);&#125;(jQuery, window, document));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>ECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。</p><p>严格模式会阻止使用在未来很可能被引入的预留关键字。</p><p>你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。</p><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>总是使用 let 来声明变量。如不指定 let，变量将被隐式地声明为全局变量，例如</p><pre class="line-numbers language-none"><code class="language-none">let a &#x3D; b &#x3D; 0; &#x2F;&#x2F;b会被隐式的创建为全局变量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，请总是使用 let 来声明变量，并且使用单let模式（将所有的变量在函数最前面只使用一个let定义）。例如：</p><pre class="line-numbers language-none"><code class="language-none">(function ()&#123;  &#39;use strict&#39;  let a &#x3D; 0,      b &#x3D; 0,      c &#x3D; 0,      i,      j,      myObject();&#125;())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。</p><h3 id="js声明提前"><a href="#js声明提前" class="headerlink" title="js声明提前"></a>js声明提前</h3><p>javascript会自动将函数作用域内的变量和方法的定义提前（只是提前声明，赋值还是在原处）<br>例如：</p><pre class="line-numbers language-none"><code class="language-none">(function(log)&#123;  &#39;use strict&#39;;  let a &#x3D; 10;  for(let i &#x3D; 0; i &lt; a; i++) &#123;    let b &#x3D; i * i;    log(b);  &#125;  if(a &#x3D;&#x3D;&#x3D; 10) &#123;    let f &#x3D; function() &#123;      log(a);    &#125;;    f();  &#125;  function x() &#123;    log(&#39;Mr. X!&#39;);  &#125;  x();&#125;(window.console.log));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提升后的js</p><pre class="line-numbers language-none"><code class="language-none">(function(log)&#123;  &#39;use strict&#39;;  &#x2F;&#x2F; All letiables used in the closure will be hoisted to the top of the function  let a,      i,      b,      f;  &#x2F;&#x2F; All functions in the closure will be hoisted to the top  function x() &#123;    log(&#39;Mr. X!&#39;);  &#125;  a &#x3D; 10;  for(i &#x3D; 0; i &lt; a; i++) &#123;    b &#x3D; i * i;    log(b);  &#125;  if(a &#x3D;&#x3D;&#x3D; 10) &#123;    &#x2F;&#x2F; Function assignments will only result in hoisted letiables but the function body will not be hoisted    &#x2F;&#x2F; Only by using a real function declaration the whole function will be hoisted with its body    f &#x3D; function() &#123;      log(a);    &#125;;    f();  &#125;  x();&#125;(window.console.log));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用严格等"><a href="#使用严格等" class="headerlink" title="使用严格等"></a>使用严格等</h3><p>总是使用 <code>===</code> 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。例如：</p><pre class="line-numbers language-none"><code class="language-none">(function(log)&#123;  &#39;use strict&#39;;  log(&#39;0&#39; &#x3D;&#x3D; 0); &#x2F;&#x2F; true  log(&#39;&#39; &#x3D;&#x3D; false); &#x2F;&#x2F; true  log(&#39;1&#39; &#x3D;&#x3D; true); &#x2F;&#x2F; true  log(null &#x3D;&#x3D; undefined); &#x2F;&#x2F; true  let x &#x3D; &#123;    valueOf: function() &#123;      return &#39;X&#39;;    &#125;  &#125;;  log(x &#x3D;&#x3D; &#39;X&#39;);&#125;(window.console.log));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="等同-x3D-x3D-和严格等-x3D-x3D-x3D-的区别"><a href="#等同-x3D-x3D-和严格等-x3D-x3D-x3D-的区别" class="headerlink" title="等同&#x3D;&#x3D; 和严格等&#x3D;&#x3D;&#x3D;的区别"></a>等同&#x3D;&#x3D; 和严格等&#x3D;&#x3D;&#x3D;的区别</h3><ul><li>&#x3D;&#x3D;， 两边值类型不同的时候，要先进行类型转换，再比较。</li><li>&#x3D;&#x3D;&#x3D;，不做类型转换，类型不同的一定不等。</li></ul><p>&#x3D;&#x3D;等同操作符</p><ul><li>如果两个值具有相同类型，会进行&#x3D;&#x3D;&#x3D;比较，返回&#x3D;&#x3D;&#x3D;的比较值 </li><li>如果两个值不具有相同类型，也有可能返回true </li><li>如果一个值是null另一个值是undefined，返回true </li><li>如果一个值是string另个是number，会把string转换成number再进行比较 </li><li>如果一个值是true，会把它转成1再比较，false会转成0</li></ul><pre class="line-numbers language-none"><code class="language-none">console.log( false &#x3D;&#x3D; null )      &#x2F;&#x2F; falseconsole.log( false &#x3D;&#x3D; undefined ) &#x2F;&#x2F; falseconsole.log( false &#x3D;&#x3D; 0 )         &#x2F;&#x2F; trueconsole.log( false &#x3D;&#x3D; &#39;&#39; )        &#x2F;&#x2F; trueconsole.log( false &#x3D;&#x3D; NaN )       &#x2F;&#x2F; falseconsole.log( null &#x3D;&#x3D; undefined ) &#x2F;&#x2F; trueconsole.log( null &#x3D;&#x3D; 0 )         &#x2F;&#x2F; falseconsole.log( null &#x3D;&#x3D; &#39;&#39; )        &#x2F;&#x2F; falseconsole.log( null &#x3D;&#x3D; NaN )       &#x2F;&#x2F; falseconsole.log( undefined &#x3D;&#x3D; 0)   &#x2F;&#x2F; falseconsole.log( undefined &#x3D;&#x3D; &#39;&#39;)  &#x2F;&#x2F; falseconsole.log( undefined &#x3D;&#x3D; NaN) &#x2F;&#x2F; falseconsole.log( 0 &#x3D;&#x3D; &#39;&#39; )  &#x2F;&#x2F; trueconsole.log( 0 &#x3D;&#x3D; NaN ) &#x2F;&#x2F; false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结一下&#x3D;&#x3D;</p><ul><li>false 除了和自身比较为 true 外，和 0，”” 比较也为 true</li><li>null 只和 undefined 比较时为 true， 反过来 undefined 也仅和 null 比较为 true，没有第二个</li><li>0 除了和 false 比较为 true，还有空字符串 ‘’” 和空数组 []</li><li>空字符串 ‘’ 除了和 false 比较为 true，还有一个数字 0</li></ul><blockquote><p>&#x3D;&#x3D;, &gt;, &lt;, +, -, … 这些操作符所造成的隐式类型转换都是无副作用的，它不会改变变量本身保存的值。，但是，如果你覆写某个对象的 <code>valueOf/toString</code>的话，&#x3D;&#x3D;就会产生副作用.</p></blockquote><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">Array.prototype.valueOf &#x3D; function() &#123;  this[0]++;  return this;&#125;let x &#x3D; [1, 2, 3];x &#x3D;&#x3D; 0;console.log(x);   &#x2F;&#x2F; [2, 2, 3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x3D;&#x3D;&#x3D;操作符：</p><ul><li>要是两个值类型不同，返回false </li><li>要是两个值都是number类型，并且数值相同，返回true </li><li>要是两个值都是stirng，并且两个值的String内容相同，返回true </li><li>要是两个值都是true或者都是false，返回true </li><li>要是两个值都是指向相同的Object，Arraya或者function，返回true </li><li>要是两个值都是null或者都是undefined，返回true</li></ul><h2 id="真假判断"><a href="#真假判断" class="headerlink" title="真假判断"></a>真假判断</h2><ul><li>js中以下内容为假：</li><li>false</li><li>null</li><li>undefined</li><li>0</li><li>‘’ (空字符串)</li><li>NaN</li></ul><h2 id="设置默认参数"><a href="#设置默认参数" class="headerlink" title="设置默认参数"></a>设置默认参数</h2><p>辑操作符 || 和 &amp;&amp; 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。例如:如果x不存在且y不存在，x&#x3D;1；如果x存在y存在，x &#x3D; y</p><pre class="line-numbers language-none"><code class="language-none">if(!x) &#123;  if(!y) &#123;    x &#x3D; 1;  &#125; else &#123;    x &#x3D; y;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 等同于：</p><pre class="line-numbers language-none"><code class="language-none">x &#x3D; x || y || 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一小技巧经常用来给方法设定默认的参数。</p><pre class="line-numbers language-none"><code class="language-none">(function(log)&#123;  &#39;use strict&#39;;  function multiply(a, b) &#123;    a &#x3D; a || 1;    b &#x3D; b || 1;    log(&#39;Result &#39; + a * b);  &#125;  multiply(); &#x2F;&#x2F; Result 1  multiply(10); &#x2F;&#x2F; Result 10  multiply(3, NaN); &#x2F;&#x2F; Result 3  multiply(9, 5); &#x2F;&#x2F; Result 45&#125;(window.console.log));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不使用eval-函数"><a href="#不使用eval-函数" class="headerlink" title="不使用eval()函数"></a>不使用eval()函数</h2><p>就如eval的字面意思来说，恶魔，使用eval()函数会带来安全隐患。<br>eval()函数的作用是返回任意字符串，当作js代码来处理。</p><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>只在对象构造器、方法和在设定的闭包中使用 this 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 call() 和 apply() 执行和调用时）。</p><p>正因为它是如此容易地被搞错，请限制它的使用场景：</p><ul><li>在构造函数中</li><li>在对象的方法中（包括由此创建出的闭包内）</li></ul><h2 id="首选函数式风格"><a href="#首选函数式风格" class="headerlink" title="首选函数式风格"></a>首选函数式风格</h2><p>函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。</p><p>接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。<br>不推荐</p><pre class="line-numbers language-none"><code class="language-none">(function(log)&#123;  &#39;use strict&#39;;  let arr &#x3D; [10, 3, 7, 9, 100, 20],      sum &#x3D; 0,      i;  for(i &#x3D; 0; i &lt; arr.length; i++) &#123;    sum +&#x3D; arr[i];  &#125;  log(&#39;The sum of array &#39; + arr + &#39; is: &#39; + sum)&#125;(window.console.log));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐(函数式编程)：</p><pre class="line-numbers language-none"><code class="language-none">(function(log)&#123;  &#39;use strict&#39;;  let arr &#x3D; [10, 3, 7, 9, 100, 20];  let sum &#x3D; arr.reduce(function(prevValue, currentValue) &#123;    return prevValue + currentValue;  &#125;, 0);  log(&#39;The sum of array &#39; + arr + &#39; is: &#39; + sum);&#125;(window.console.log));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改内建对象的原型链"><a href="#修改内建对象的原型链" class="headerlink" title="修改内建对象的原型链"></a>修改内建对象的原型链</h2><p>修改内建的诸如 <code>Object.prototype</code> 和 <code>Array.prototype</code> 是被严厉禁止的。修改其它的内建对象比如 <code>Function.prototype</code>，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。</p><h2 id="三元条件判断（if-的快捷方法）"><a href="#三元条件判断（if-的快捷方法）" class="headerlink" title="三元条件判断（if 的快捷方法）"></a>三元条件判断（if 的快捷方法）</h2><p>用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。<br>不推荐：</p><pre class="line-numbers language-none"><code class="language-none">if(x &#x3D;&#x3D;&#x3D; 10) &#123;  return &#39;valid&#39;;&#125; else &#123;  return &#39;invalid&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐：</p><pre class="line-numbers language-none"><code class="language-none">return x &#x3D;&#x3D;&#x3D; 10 ? &#39;valid&#39; : &#39;invalid&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="css规范"><a href="#css规范" class="headerlink" title="css规范"></a>css规范</h2><h3 id="id和class的命名"><a href="#id和class的命名" class="headerlink" title="id和class的命名"></a>id和class的命名</h3><p>ID和class的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称<br>不推荐 :</p><pre class="line-numbers language-none"><code class="language-none">.fw-800 &#123;  font-weight: 800;&#125;.red &#123;  color: red;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐 :</p><pre class="line-numbers language-none"><code class="language-none">.heavy &#123;  font-weight: 800;&#125;.important &#123;  color: red;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合理的使用ID"><a href="#合理的使用ID" class="headerlink" title="合理的使用ID"></a>合理的使用ID</h3><p>一般情况下ID不应该被用于样式，并且ID的权重很高，所以不使用ID解决样式的问题，而是使用class<br>不推荐：</p><pre class="line-numbers language-none"><code class="language-none">#content .title &#123;  font-size: 2em;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>推荐：</p><pre class="line-numbers language-none"><code class="language-none">.content .title &#123;  font-size: 2em;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="css选择器中避免使用标签名"><a href="#css选择器中避免使用标签名" class="headerlink" title="css选择器中避免使用标签名"></a>css选择器中避免使用标签名</h3><p>从结构、表现、行为分离的原则来看，应该尽量避免css中出现HTML标签，并且在css选择器中出现标签名会存在潜在的问题。</p><h3 id="使用子选择器"><a href="#使用子选择器" class="headerlink" title="使用子选择器"></a>使用子选择器</h3><p>很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。<br>有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。<br>然而，在任何情况下，这是一个非常不好的做法。<br>如果你不写很通用的，需要匹配到DOM末端的选择器， 你应该总是考虑直接子选择器。<br>不推荐:</p><pre class="line-numbers language-none"><code class="language-none">.content .title &#123;  font-size: 2rem;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>推荐</p><pre class="line-numbers language-none"><code class="language-none">.content &gt; .title &#123;  font-size: 2rem;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="尽量使用缩写属性"><a href="#尽量使用缩写属性" class="headerlink" title="尽量使用缩写属性"></a>尽量使用缩写属性</h3><p>尽量使用缩写属性对于代码效率和可读性是很有用的，比如font属性。<br>不推荐：</p><pre class="line-numbers language-none"><code class="language-none">border-top-style: none;font-family: palatino, georgia, serif;font-size: 100%;line-height: 1.6;padding-bottom: 2em;padding-left: 1em;padding-right: 1em;padding-top: 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐：</p><pre class="line-numbers language-none"><code class="language-none">border-top: 0;font: 100%&#x2F;1.6 palatino, georgia, serif;padding: 0 1em 2em;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0后面不带单位"><a href="#0后面不带单位" class="headerlink" title="0后面不带单位"></a>0后面不带单位</h3><p>省略0后面的单位，<br>不推荐：</p><pre class="line-numbers language-none"><code class="language-none">padding-bottom: 0px;margin: 0em;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>推荐：</p><pre class="line-numbers language-none"><code class="language-none">padding-bottom: 0;margin: 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="属性格式"><a href="#属性格式" class="headerlink" title="属性格式"></a>属性格式</h3><ul><li>为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。</li><li>属性名的冒号后使用一个空格。出于一致性的原因，<br>属性和值（但属性和冒号之间没有空格）的之间始终使用一个空格。</li><li>每个选择器和属性声明总是使用新的一行。</li><li>属性选择器或属性值用双引号（””），而不是单引号（”）括起来。</li><li>URI值（url()）不要使用引号。</li></ul><p>作为最佳实践，我们应该遵循以下顺序（应该按照下表的顺序）：</p><p>结构性属性：</p><ol><li>display</li><li>position, left, top, right etc.</li><li>overflow, float, clear etc.</li><li>margin, padding</li></ol><p>表现性属性：</p><ul><li>background, border etc.</li><li>font, text</li></ul><p>不推荐：</p><pre class="line-numbers language-none"><code class="language-none"> .box &#123;  font-family: &#39;Arial&#39;, sans-serif;  border: 3px solid #ddd;  left: 30%;  position: absolute;  text-transform: uppercase;  background-color: #eee;  right: 30%;  isplay: block;  font-size: 1.5rem;  overflow: hidden;  padding: 1em;  margin: 1em;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐：</p><pre class="line-numbers language-none"><code class="language-none">.box &#123;  display: block;  position: absolute;  left: 30%;  right: 30%;  overflow: hidden;  margin: 1em;  padding: 1em;  background-color: #eee;  border: 3px solid #ddd;  font-family: &#39;Arial&#39;, sans-serif;  font-size: 1.5rem;  text-transform: uppercase;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 相关文章：</p><ul><li><a href="https://www.cnblogs.com/polk6/p/4660195.html">JavsScript开发规范</a></li><li><a href="https://segmentfault.com/a/1190000006131512">开发规范（四）JS规范</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前端开发规范：命名规范、html规范、css规范、js规范&quot;&gt;&lt;a href=&quot;#前端开发规范：命名规范、html规范、css规范、js规范&quot; class=&quot;headerlink&quot; title=&quot;前端开发规范：命名规范、html规范、css规范、js规范&quot;&gt;&lt;/a&gt;前端开发规范：命名规范、html规范、css规范、js规范&lt;/h2&gt;&lt;p&gt;一个好的程序员肯定是要能书写可维护的代码，而不是一次性的代码，怎么能让团队当中其他人甚至一段时间时候你再看你某个时候写的代码也能看懂呢，这就需要规范你的代码了。&lt;/p&gt;
&lt;h2 id=&quot;命名&quot;&gt;&lt;a href=&quot;#命名&quot; class=&quot;headerlink&quot; title=&quot;命名&quot;&gt;&lt;/a&gt;命名&lt;/h2&gt;&lt;h3 id=&quot;驼峰式命名法介绍&quot;&gt;&lt;a href=&quot;#驼峰式命名法介绍&quot; class=&quot;headerlink&quot; title=&quot;驼峰式命名法介绍&quot;&gt;&lt;/a&gt;驼峰式命名法介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="前端" scheme="https://www.simimi.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS命名参考</title>
    <link href="https://www.simimi.cn/note/css-name/"/>
    <id>https://www.simimi.cn/note/css-name/</id>
    <published>2022-06-01T06:52:09.000Z</published>
    <updated>2022-06-01T06:52:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS命名参考"><a href="#CSS命名参考" class="headerlink" title="CSS命名参考"></a>CSS命名参考</h2><h3 id="页面结构命名"><a href="#页面结构命名" class="headerlink" title="页面结构命名"></a>页面结构命名</h3><pre class="line-numbers language-none"><code class="language-none">page  &#x2F;&#x2F; 代表整个页面，用于最外层。wrap  &#x2F;&#x2F; 外套，将所有元素包在一起的一个外围包，用于最外层wrapper  &#x2F;&#x2F; 页面外围控制整体布局宽度，用于最外层container  &#x2F;&#x2F; 一个整体容器，用于最外层head|header  &#x2F;&#x2F; 页头区域，用于头部nav  &#x2F;&#x2F; 导航条content  &#x2F;&#x2F; 内容，网站中最重要的内容区域，用于网页中部主体main  &#x2F;&#x2F; 网站中的主要区域（表示最重要的一块位置），用于中部主体内容column  &#x2F;&#x2F; 栏目sidebar  &#x2F;&#x2F; 侧栏foot|footer  &#x2F;&#x2F; 页尾、页脚。网站一些附加信息放置区域，（或命名为 copyright）用于底部<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="导航命名"><a href="#导航命名" class="headerlink" title="导航命名"></a>导航命名</h3><pre class="line-numbers language-none"><code class="language-none">nav|navbar|navigation|nav-wrapper  &#x2F;&#x2F; 导航条或导航包，代表横向导航topnav  &#x2F;&#x2F; 顶部导航mainbav  &#x2F;&#x2F; 主导航subnav  &#x2F;&#x2F; 子导航sidebar  &#x2F;&#x2F; 边导航leftsidebar|sidebar-l  &#x2F;&#x2F; 左导航rightsidebar|sidebar-r  &#x2F;&#x2F; 右导航title  &#x2F;&#x2F; 标题subtitle  &#x2F;&#x2F; 二级标题summary  &#x2F;&#x2F; 摘要menu  &#x2F;&#x2F; 菜单，区域包含一般的链接和菜单submenu  &#x2F;&#x2F; 子菜单drop  &#x2F;&#x2F; 下拉dorpmenu  &#x2F;&#x2F; 下拉菜单links  &#x2F;&#x2F; 链接菜单<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="功能命名"><a href="#功能命名" class="headerlink" title="功能命名"></a>功能命名</h3><pre class="line-numbers language-none"><code class="language-none">logo  &#x2F;&#x2F; 标记网站logo标志banner  &#x2F;&#x2F; 标语、广告条、顶部广告条login  &#x2F;&#x2F; 登陆，（例如: 登录表单 form-login）loginbar  &#x2F;&#x2F; 登录条text  &#x2F;&#x2F; 文本register  &#x2F;&#x2F; 注册tool|toolbar  &#x2F;&#x2F; 工具条search  &#x2F;&#x2F; 搜索searchbar  &#x2F;&#x2F; 搜索条searchlnput  &#x2F;&#x2F; 搜索输入框shop  &#x2F;&#x2F; 功能区，表示现在的icon  &#x2F;&#x2F; 小图标label  &#x2F;&#x2F; 商标homepage  &#x2F;&#x2F; 首页subpage  &#x2F;&#x2F; 二级页面子页面hot  &#x2F;&#x2F; 热门热点list  &#x2F;&#x2F; 文章列表，（例如: 新闻列表 list-news）scroll  &#x2F;&#x2F; 滚动tab  &#x2F;&#x2F; 标签sitemap  &#x2F;&#x2F; 网站地图msg|message  &#x2F;&#x2F; 提示信息current  &#x2F;&#x2F; 当前的joinus  &#x2F;&#x2F; 加入status  &#x2F;&#x2F; 状态btn  &#x2F;&#x2F; 按钮，（例如: 搜索按钮可写成  btn-search）tips  &#x2F;&#x2F; 小技巧note  &#x2F;&#x2F; 注释guild  &#x2F;&#x2F; 指南arr|arrow  &#x2F;&#x2F; 标记箭头service  &#x2F;&#x2F; 服务breadcrumb  &#x2F;&#x2F; 页面所处位置导航提示download  &#x2F;&#x2F; 下载vote  &#x2F;&#x2F; 投票news  &#x2F;&#x2F; 新闻siteinfo  &#x2F;&#x2F; 网站信息partner  &#x2F;&#x2F; 合作伙伴friendlink  &#x2F;&#x2F; 友情链接copyright  &#x2F;&#x2F; 版权信息siteinfoCredits  &#x2F;&#x2F; 信誉siteinfoLegal  &#x2F;&#x2F; 法律信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="状态命名"><a href="#状态命名" class="headerlink" title="状态命名"></a>状态命名</h3><pre class="line-numbers language-none"><code class="language-none">primary &#x2F;&#x2F; 主要inof &#x2F;&#x2F; 提示信息success &#x2F;&#x2F; 成功warning &#x2F;&#x2F; 一般警告error &#x2F;&#x2F; 错误警告danger &#x2F;&#x2F; 严重警告link &#x2F;&#x2F; 文字链接plain|ghost &#x2F;&#x2F; 按钮是否镂空light &#x2F;&#x2F; 亮模式dark &#x2F;&#x2F; 暗模式disable &#x2F;&#x2F; 禁用active &#x2F;&#x2F; 激活checked &#x2F;&#x2F; 选中loading &#x2F;&#x2F; 加载中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关系命名"><a href="#关系命名" class="headerlink" title="关系命名"></a>关系命名</h3><pre class="line-numbers language-none"><code class="language-none">first &#x2F;&#x2F; 第一个last &#x2F;&#x2F; 最后一个prev &#x2F;&#x2F; 上一个current &#x2F;&#x2F; 当前项next &#x2F;&#x2F; 下一个forward &#x2F;&#x2F; 向前back &#x2F;&#x2F; 向后<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="尺寸命名"><a href="#尺寸命名" class="headerlink" title="尺寸命名"></a>尺寸命名</h3><pre class="line-numbers language-none"><code class="language-none">large &#x2F;&#x2F; 大middle &#x2F;&#x2F; 中small &#x2F;&#x2F; 小mini &#x2F;&#x2F; 迷你<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><pre class="line-numbers language-none"><code class="language-none">top &#x2F;&#x2F; 上bottom &#x2F;&#x2F; 下left &#x2F;&#x2F; 左right &#x2F;&#x2F; 右center &#x2F;&#x2F; 居中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS-样式文件名"><a href="#CSS-样式文件名" class="headerlink" title="CSS 样式文件名"></a>CSS 样式文件名</h3><pre class="line-numbers language-none"><code class="language-none">index.css &#x2F;&#x2F;  一般用于首页建立样式head.css &#x2F;&#x2F;  头部样式，当多个页面头部设计风格相同时使用。base.css &#x2F;&#x2F;  共用样式。style.css &#x2F;&#x2F; 独立页面所使用的样式文件。global.css &#x2F;&#x2F; 页面样式基础，全局公用样式，页面中必须包含。layout.css &#x2F;&#x2F; 布局、版面样式，公用类型较多时使用，一般用在首页级页面和产品类页面中module.css &#x2F;&#x2F; 模块，用于产品类页，也可与其它样式配合使用。master.css &#x2F;&#x2F; 主要的样式表columns.css &#x2F;&#x2F; 专栏样式themes.css &#x2F;&#x2F; 主体样式forms.css &#x2F;&#x2F; 表单样式mend.css &#x2F;&#x2F; 补丁，基于以上样式进行的私有化修补。print.css &#x2F;&#x2F; 打印<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 使用BEM命名约定，块（block）、元素（element）、修饰符（modifier）.my-btn &#123;&#125;.my_btn--primary &#123;&#125;.my_btn--success &#123;&#125;.my-btn__inner &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h3><pre class="line-numbers language-none"><code class="language-none">1）文件顶部注释（推荐使用）   &#x2F;*    * @description: 说明    * @author: 张三    * @update: zhangsan (2021-04-13 18:32)    *&#x2F;2）模块注释    &#x2F;* module: module1 by 张三 *&#x2F;    …    &#x2F;* module: module2 by 张三 *&#x2F;    &#x2F;&#x2F; 模块注释必须单独写在一行3）单行注释    &#x2F;* this is a short comment *&#x2F;4）多行注释   &#x2F;*    * this is comment line 1.    * this is comment line 2.    *&#x2F;5）特殊注释    &#x2F;* TODO: xxxx by name 2022-06-01 18:32 *&#x2F;    &#x2F;&#x2F;用于标注修改、待办等信息6）区块注释    &#x2F;* Header *&#x2F;    &#x2F;* Footer *&#x2F;    &#x2F;* Gallery *&#x2F;    &#x2F;&#x2F; 对一个代码区块注释（可选），将样式语句分区块并在新行中对其注释。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CSS命名参考&quot;&gt;&lt;a href=&quot;#CSS命名参考&quot; class=&quot;headerlink&quot; title=&quot;CSS命名参考&quot;&gt;&lt;/a&gt;CSS命名参考&lt;/h2&gt;&lt;h3 id=&quot;页面结构命名&quot;&gt;&lt;a href=&quot;#页面结构命名&quot; class=&quot;headerlink&quot; title=&quot;页面结构命名&quot;&gt;&lt;/a&gt;页面结构命名&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;page  &amp;#x2F;&amp;#x2F; 代表整个页面，用于最外层。
wrap  &amp;#x2F;&amp;#x2F; 外套，将所有元素包在一起的一个外围包，用于最外层
wrapper  &amp;#x2F;&amp;#x2F; 页面外围控制整体布局宽度，用于最外层
container  &amp;#x2F;&amp;#x2F; 一个整体容器，用于最外层
head|header  &amp;#x2F;&amp;#x2F; 页头区域，用于头部
nav  &amp;#x2F;&amp;#x2F; 导航条
content  &amp;#x2F;&amp;#x2F; 内容，网站中最重要的内容区域，用于网页中部主体
main  &amp;#x2F;&amp;#x2F; 网站中的主要区域（表示最重要的一块位置），用于中部主体内容
column  &amp;#x2F;&amp;#x2F; 栏目
sidebar  &amp;#x2F;&amp;#x2F; 侧栏
foot|footer  &amp;#x2F;&amp;#x2F; 页尾、页脚。网站一些附加信息放置区域，（或命名为 copyright）用于底部&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CSS" scheme="https://www.simimi.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS规范</title>
    <link href="https://www.simimi.cn/note/css-norm/"/>
    <id>https://www.simimi.cn/note/css-norm/</id>
    <published>2022-06-01T06:51:55.000Z</published>
    <updated>2022-06-01T06:51:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS规范"><a href="#CSS规范" class="headerlink" title="CSS规范"></a>CSS规范</h2><h3 id="CSS书写顺序"><a href="#CSS书写顺序" class="headerlink" title="CSS书写顺序"></a>CSS书写顺序</h3><blockquote><ol><li>位置属性(position, top, right, z-index, display, float等)</li><li>大小(width, height, padding, margin)</li><li>文字系列(font, line-height, letter-spacing, color- text-align等)</li><li>背景(background, border等)</li><li>其他(animation, transition等)</li></ol></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*** Bad ***.example</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #9e0<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">*** Good ***.example</span> <span class="token punctuation">&#123;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #9e0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h3><blockquote><h4 id="使用CSS缩写属性"><a href="#使用CSS缩写属性" class="headerlink" title="使用CSS缩写属性"></a>使用CSS缩写属性</h4><p>CSS有些属性是可以缩写的，比如padding,margin,font等等，这样精简代码同时又能提高用户的阅读体验。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*** Bad ***.box</span> <span class="token punctuation">&#123;</span><span class="token property">border-top-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> serif<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.6<span class="token punctuation">;</span>    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>    <span class="token property">padding-right</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>    <span class="token property">padding-top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">*** Good ***.box</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span> 100%/1.6 serif<span class="token punctuation">;</span>    padding 0 1em 2em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h4 id="去掉小数点前的“0”"><a href="#去掉小数点前的“0”" class="headerlink" title="去掉小数点前的“0”"></a>去掉小数点前的“0”</h4></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css">*** Bad ***  <span class="token property">font-size</span><span class="token punctuation">:</span> 0.8em<span class="token punctuation">;</span>*** Good ***<span class="token property">font-size</span><span class="token punctuation">:</span> .8em<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><h4 id="简写命名"><a href="#简写命名" class="headerlink" title="简写命名"></a>简写命名</h4><p>很多用户都喜欢简写类名，但前提是要让人看懂你的命名才能简写哦！</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*** Bad ***.navigation</span> <span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0 0 1em 2em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.atr</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> #93c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">*** Good ***#nav</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 0 1em 2em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.author</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #93c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h4 id="16进制颜色代码缩写"><a href="#16进制颜色代码缩写" class="headerlink" title="16进制颜色代码缩写"></a>16进制颜色代码缩写</h4><p>有些颜色代码是可以缩写的，我们就尽量缩写吧，提高用户体验为主。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css">*** Bad ***<span class="token property">color</span><span class="token punctuation">:</span> #eebbcc<span class="token punctuation">;</span>*** Good ***<span class="token property">color</span><span class="token punctuation">:</span> #ebc<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><h4 id="连字符CSS选择器命名规范"><a href="#连字符CSS选择器命名规范" class="headerlink" title="连字符CSS选择器命名规范"></a>连字符CSS选择器命名规范</h4><ol><li><p>长名称或词组可以使用中横线来为选择器命名。</p></li><li><p>不建议使用“_”下划线来命名CSS选择器，为什么呢？</p></li></ol><ul><li><p>输入的时候少按一个shift键；</p></li><li><p>浏览器兼容问题 （比如使用_tips的选择器命名，在IE6是无效的）</p></li><li><p>能良好区分JavaScript变量命名（JS变量命名是用“_”）</p></li></ul></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*** Bad ***.maintitle</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> #e3c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.main_title</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> #e3c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">*** Good ***.main-title</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> #e3c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h4 id="不要随意使用id"><a href="#不要随意使用id" class="headerlink" title="不要随意使用id"></a>不要随意使用id</h4><p>id在JS是唯一的，不能多次使用，而使用class类选择器却可以重复使用，另外id的优先级优先与class，所以id应该按需使用，而不能滥用。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*** Bad ***#info-title</span> <span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">*** Good ***.info-title</span> <span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h4 id="为选择器添加状态前缀"><a href="#为选择器添加状态前缀" class="headerlink" title="为选择器添加状态前缀"></a>为选择器添加状态前缀</h4><p>有时候可以给选择器添加一个表示状态的前缀，让语义更明了，比如下图是添加了“.is-”前缀。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*** Bad ***.error</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">*** Good ***.is-error</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CSS规范&quot;&gt;&lt;a href=&quot;#CSS规范&quot; class=&quot;headerlink&quot; title=&quot;CSS规范&quot;&gt;&lt;/a&gt;CSS规范&lt;/h2&gt;&lt;h3 id=&quot;CSS书写顺序&quot;&gt;&lt;a href=&quot;#CSS书写顺序&quot; class=&quot;headerlink&quot; title=&quot;CSS书写顺序&quot;&gt;&lt;/a&gt;CSS书写顺序&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;位置属性(position, top, right, z-index, display, float等)&lt;/li&gt;
&lt;li&gt;大小(width, height, padding, margin)&lt;/li&gt;
&lt;li&gt;文字系列(font, line-height, letter-spacing, color- text-align等)&lt;/li&gt;
&lt;li&gt;背景(background, border等)&lt;/li&gt;
&lt;li&gt;其他(animation, transition等)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;line-numbers language-css&quot; data-language=&quot;css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;*** Bad ***
.example&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #9e0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1.5em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;*** Good ***
.example&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1.5em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #9e0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CSS" scheme="https://www.simimi.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS设置字体</title>
    <link href="https://www.simimi.cn/note/css-font/"/>
    <id>https://www.simimi.cn/note/css-font/</id>
    <published>2022-05-20T08:52:12.000Z</published>
    <updated>2022-05-20T08:52:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS初始化字体"><a href="#CSS初始化字体" class="headerlink" title="CSS初始化字体"></a>CSS初始化字体</h2><pre class="line-numbers language-none"><code class="language-none">@font-face &#123;  font-family: Emoji;  src: local(&quot;Apple Color Emojiji&quot;), local(&quot;Segoe UI Emoji&quot;), local(&quot;Segoe UI Symbol&quot;), local(&quot;Noto Color Emoji&quot;);  unicode-range: U+1F000-1F644, U+203C-3299;&#125;body &#123;  font-family: system-ui, —apple-system, Segoe UI, Rototo, Emoji, Helvetica, Arial, sans-serif;&#125;​<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CSS初始化字体&quot;&gt;&lt;a href=&quot;#CSS初始化字体&quot; class=&quot;headerlink&quot; title=&quot;CSS初始化字体&quot;&gt;&lt;/a&gt;CSS初始化字体&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;@font-face &amp;#123;
  font-family: Emoji;
  src: local(&amp;quot;Apple Color Emojiji&amp;quot;), local(&amp;quot;Segoe UI Emoji&amp;quot;), local(&amp;quot;Segoe UI Symbol&amp;quot;), local(&amp;quot;Noto Color Emoji&amp;quot;);
  unicode-range: U+1F000-1F644, U+203C-3299;
&amp;#125;
body &amp;#123;
  font-family: system-ui, —apple-system, Segoe UI, Rototo, Emoji, Helvetica, Arial, sans-serif;
&amp;#125;​&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CSS" scheme="https://www.simimi.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>使用v2rayN代理Git、PowerShell、CMD的设置</title>
    <link href="https://www.simimi.cn/note/proxy-v2ray/"/>
    <id>https://www.simimi.cn/note/proxy-v2ray/</id>
    <published>2022-05-17T08:52:12.000Z</published>
    <updated>2022-05-17T08:52:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-命令设置代理"><a href="#git-命令设置代理" class="headerlink" title="git 命令设置代理"></a>git 命令设置代理</h2><ul><li>设置永久有效</li></ul><pre class="line-numbers language-none"><code class="language-none">git config --global https.proxy http:&#x2F;&#x2F;127.0.0.1:10809git config --global https.proxy https:&#x2F;&#x2F;127.0.0.1:10809git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:10808&#39;git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:10808&#39;git config --global --list#查询代理设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h2 id="PowerShell-代理设置"><a href="#PowerShell-代理设置" class="headerlink" title="PowerShell 代理设置"></a>PowerShell 代理设置</h2><ul><li>设置仅本次有效</li></ul><pre class="line-numbers language-none"><code class="language-none">env:HTTP_PROXY&#x3D;&quot;127.0.0.1:10809$env:HTTPS_PROXY&#x3D;&quot;127.0.0.1:10809<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="CMD-代理设置"><a href="#CMD-代理设置" class="headerlink" title="CMD 代理设置"></a>CMD 代理设置</h2><ul><li>设置内容仅本次有效</li></ul><pre class="line-numbers language-none"><code class="language-none">set HTTP_PROXY&#x3D;127.0.0.1:10809set HTTPS_PROXY&#x3D;127.0.0.1:10809<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="v2rayN下载-https-github-com-2dust-v2rayN-releases"><a href="#v2rayN下载-https-github-com-2dust-v2rayN-releases" class="headerlink" title="v2rayN下载 https://github.com/2dust/v2rayN/releases"></a>v2rayN下载 <a href="https://github.com/2dust/v2rayN/releases">https://github.com/2dust/v2rayN/releases</a></h2><ul><li><a href="https://github.com/2dust/v2rayN/releases">v2rayN(Windows客户端)</a></li><li><a href="https://github.com/2dust/v2rayNG/releases">v2rayNG(Android App)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;git-命令设置代理&quot;&gt;&lt;a href=&quot;#git-命令设置代理&quot; class=&quot;headerlink&quot; title=&quot;git 命令设置代理&quot;&gt;&lt;/a&gt;git 命令设置代理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;设置永久有效&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;git config --global https.proxy http:&amp;#x2F;&amp;#x2F;127.0.0.1:10809
git config --global https.proxy https:&amp;#x2F;&amp;#x2F;127.0.0.1:10809
git config --global http.proxy &amp;#39;socks5:&amp;#x2F;&amp;#x2F;127.0.0.1:10808&amp;#39;
git config --global https.proxy &amp;#39;socks5:&amp;#x2F;&amp;#x2F;127.0.0.1:10808&amp;#39;
git config --global --list	#查询代理设置&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Proxy" scheme="https://www.simimi.cn/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>最新青龙面板薅羊毛教程【全过程】</title>
    <link href="https://www.simimi.cn/tutorial/ql-jd/"/>
    <id>https://www.simimi.cn/tutorial/ql-jd/</id>
    <published>2022-05-09T02:21:10.000Z</published>
    <updated>2022-05-10T02:21:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先安装宝塔面板"><a href="#首先安装宝塔面板" class="headerlink" title="首先安装宝塔面板"></a>首先安装宝塔面板</h3><p>使用 centos 7.X 的系统 用 Shell 复制以下命令安装宝塔面板<br><code>yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</code></p><ul><li>安装好后会提示账号和密码记得保存</li><li>访问 ip:8888 输了刚刚的账号密码登录即可<ul><li>如访问不了可能是服务器安全策略（系统防火墙）没有开放 8888 端口号，去服务器开放即可</li><li>初次进入宝塔面板要安装运行环境，可先不安装</li></ul></li></ul><h3 id="安装-Docker-管理器"><a href="#安装-Docker-管理器" class="headerlink" title="安装 Docker 管理器"></a>安装 Docker 管理器</h3><p>登录宝塔面板后面点击左侧-软件商店-然后搜索 Docker 安装即可</p><span id="more"></span><h3 id="安装青龙面板"><a href="#安装青龙面板" class="headerlink" title="安装青龙面板"></a>安装青龙面板</h3><p>打开 Shell 或宝塔终端复制贴贴以下安装</p><pre class="line-numbers language-none"><code class="language-none">docker run -dit \-v $PWD&#x2F;ql1:&#x2F;ql&#x2F;data \-p 5744:5700 \--name ql1 \--hostname ql1 \--restart unless-stopped \whyour&#x2F;qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如需多容器修改<code>QL2</code>和<code>5745</code>即可 如</p><pre class="line-numbers language-none"><code class="language-none">docker run -dit \-v $PWD&#x2F;ql2:&#x2F;ql&#x2F;data \-p 5745:5700 \--name ql2 \--hostname ql2 \--restart unless-stopped \whyour&#x2F;qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装成功后在</p><ul><li>服务器控制面板打开端口号，上面是<code>5745</code>，就打开<code>5745</code>端口</li><li>宝塔面板左侧-安全-系统防火墙放行<code>5745</code>端口即可<ul><li>俩都要打开</li></ul></li></ul><p>青龙面板新增任务</p><ul><li>命令<code>ql repo https://hub.fastgit.xyz/KingRan/KR.git &quot;jd_|jx_|jdCookie&quot; &quot;activity| backUp&quot; &quot;^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR&quot;</code></li><li>定时规则<code>34 18 * * * *</code></li><li>运行此任务拉取脚本即可</li></ul><p>青龙面板添加依赖（必须）</p><ul><li><p>点击青龙面板的依赖管理——新建依赖——选择 NodeJs、自动拆分选择是、复制以下的依赖填到名称里——点击确定，等待安装完成</p></li><li><p>NodeJs 下</p></li></ul><pre class="line-numbers language-none"><code class="language-none">crypto-jsprettytabledotenvjsdomdate-fnstough-cookietslibws@7.4.3ts-md5jsdom -gjiebafsform-datajson5global-agentpng-js@types&#x2F;noderequiretypescriptjs-base64axios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同理 Python3 下</li></ul><pre class="line-numbers language-none"><code class="language-none">requestscanvasping3jieba<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Linux 下</li></ul><pre class="line-numbers language-none"><code class="language-none">bizCodebizMsglxml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="关于青龙容器内部基本操作"><a href="#关于青龙容器内部基本操作" class="headerlink" title="关于青龙容器内部基本操作"></a>关于青龙容器内部基本操作</h4><h4 id="所有操作要首先进入当前青龙再使用-docker-exec-it-QL1-bin-bash，QL1是你的容器名称请修改需要操作容器名称"><a href="#所有操作要首先进入当前青龙再使用-docker-exec-it-QL1-bin-bash，QL1是你的容器名称请修改需要操作容器名称" class="headerlink" title="所有操作要首先进入当前青龙再使用 docker exec -it QL1 /bin/bash，QL1是你的容器名称请修改需要操作容器名称"></a>所有操作要首先进入当前青龙再使用 <code>docker exec -it QL1 /bin/bash</code>，<code>QL1</code>是你的容器名称请修改需要操作容器名称</h4><ul><li><p>更新并重启青龙 <code>ql update</code></p></li><li><p>运行自定义脚本 extra.sh <code>ql extra</code></p></li><li><p>添加单个脚本文件 <code>ql raw &lt;file_url&gt;</code></p></li><li><p>添加单个仓库的指定脚本<br><code>ql repo &lt;repo_url&gt; &lt;whitelist&gt; &lt;blacklist&gt; &lt;dependence&gt; &lt;branch&gt;</code></p></li><li><p>删除旧日志 <code>ql rmlog &lt;days&gt;</code></p></li><li><p>启动 tg-bot <code>ql bot</code></p></li><li><p>检测青龙环境并修复 <code>ql check</code></p></li><li><p>重置登录错误次数 <code>ql resetlet</code></p></li><li><p>禁用两步登录 <code>ql resettfa</code></p></li><li><p>依次执行，如果设置了随机延迟，将随机延迟一定秒数<br><code>task &lt;file_path&gt;</code></p></li><li><p>依次执行，无论是否设置了随机延迟，均立即运行，前台会输出日，同时记录在日志文件中<br><code>task &lt;file_path&gt; now</code></p></li><li><p>并发执行，无论是否设置了随机延迟，均立即运行，前台不产生日，直接记录在日志文件中，且可指定账号执行<br><code>task &lt;file_path&gt; conc &lt;env_name&gt; &lt;account_number&gt;(可选的)</code></p></li><li><p>指定账号执行，无论是否设置了随机延迟，均立即运行<br><code>task &lt;file_path&gt; desi &lt;env_name&gt; &lt;account_number&gt;</code></p></li></ul><h3 id="青龙面板的变量第三方手动-x2F-半自动提交（上传）管理中间件"><a href="#青龙面板的变量第三方手动-x2F-半自动提交（上传）管理中间件" class="headerlink" title="青龙面板的变量第三方手动&#x2F;半自动提交（上传）管理中间件"></a>青龙面板的变量第三方手动&#x2F;半自动提交（上传）管理中间件</h3><ul><li><p>创建目录并进入<br><code>mkdir QLTools &amp;&amp; cd QLTools</code></p></li><li><p><a href="https://github.com/nuanxinqing123/QLTools/releases">选择 Linux.xx.rar</a> -下载压缩包上传到此目录并解压文件</p></li><li><p>给予文件夹权限<br><code>chmod 755 QLPanelTools</code></p></li><li><p>启动程序排查启动错误<br><code>./QLPanelTools</code></p></li><li><p>程序无误后查看下面后台守护教程</p></li></ul><h3 id="程序台守护教程"><a href="#程序台守护教程" class="headerlink" title="程序台守护教程"></a>程序台守护教程</h3><ul><li><p>打开宝塔软件商店 搜索Supervisor管理器</p></li><li><p>安装 Supervisor管理器</p></li><li><p>打开Supervisor管理器</p></li><li><p>添加进程守护</p><ul><li>名称: 随便填(如qltools)</li><li>启动用户: root</li><li>运行目录: 你上传QLTools-linux-amd64文件的文件夹完整路径(如&#x2F;root&#x2F;qltools) </li><li>启动命令: 你的运行目录路径&#x2F;你要运行的程序名称(如&#x2F;root&#x2F;qltools&#x2F;QLTools-linux-amd64)</li><li>进程数量: 1</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;首先安装宝塔面板&quot;&gt;&lt;a href=&quot;#首先安装宝塔面板&quot; class=&quot;headerlink&quot; title=&quot;首先安装宝塔面板&quot;&gt;&lt;/a&gt;首先安装宝塔面板&lt;/h3&gt;&lt;p&gt;使用 centos 7.X 的系统 用 Shell 复制以下命令安装宝塔面板&lt;br&gt;&lt;code&gt;yum install -y wget &amp;amp;&amp;amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;amp;&amp;amp; sh install.sh ed8484bec&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装好后会提示账号和密码记得保存&lt;/li&gt;
&lt;li&gt;访问 ip:8888 输了刚刚的账号密码登录即可&lt;ul&gt;
&lt;li&gt;如访问不了可能是服务器安全策略（系统防火墙）没有开放 8888 端口号，去服务器开放即可&lt;/li&gt;
&lt;li&gt;初次进入宝塔面板要安装运行环境，可先不安装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;安装-Docker-管理器&quot;&gt;&lt;a href=&quot;#安装-Docker-管理器&quot; class=&quot;headerlink&quot; title=&quot;安装 Docker 管理器&quot;&gt;&lt;/a&gt;安装 Docker 管理器&lt;/h3&gt;&lt;p&gt;登录宝塔面板后面点击左侧-软件商店-然后搜索 Docker 安装即可&lt;/p&gt;</summary>
    
    
    
    <category term="思米米的小教程" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="教程" scheme="https://www.simimi.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="羊毛" scheme="https://www.simimi.cn/tags/%E7%BE%8A%E6%AF%9B/"/>
    
  </entry>
  
  <entry>
    <title>【分享】可视化图表库echarts</title>
    <link href="https://www.simimi.cn/share/js-echarts/"/>
    <id>https://www.simimi.cn/share/js-echarts/</id>
    <published>2022-04-23T09:50:23.000Z</published>
    <updated>2022-04-23T09:50:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE9&#x2F;10&#x2F;11，Chrome，Firefox，Safari 等），底层依赖矢量图形库 <a href="https://github.com/ecomfe/zrender">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p><h2 id="丰富的可视化类型"><a href="#丰富的可视化类型" class="headerlink" title="丰富的可视化类型"></a>丰富的可视化类型</h2><p>ECharts 提供了常规的<a href="https://echarts.apache.org/zh/option.html#series-line">折线图</a>、<a href="https://echarts.apache.org/zh/option.html#series-bar">柱状图</a>、<a href="https://echarts.apache.org/zh/option.html#series-scatter">散点图</a>、<a href="https://echarts.apache.org/zh/option.html#series-pie">饼图</a>、<a href="https://echarts.apache.org/zh/option.html#series-candlestick">K 线图</a>，用于统计的<a href="https://echarts.apache.org/zh/option.html#series-boxplot">盒形图</a>，用于地理数据可视化的<a href="https://echarts.apache.org/zh/option.html#series-map">地图</a>、<a href="https://echarts.apache.org/zh/option.html#series-heatmap">热力图</a>、<a href="https://echarts.apache.org/zh/option.html#series-lines">线图</a>，用于关系数据可视化的<a href="https://echarts.apache.org/zh/option.html#series-graph">关系图</a>、<a href="https://echarts.apache.org/zh/option.html#series-treemap">treemap</a>、<a href="https://echarts.apache.org/zh/option.html#series-sunburst">旭日图</a>，多维数据可视化的<a href="https://echarts.apache.org/zh/option.html#series-parallel">平行坐标</a>，还有用于 BI 的<a href="https://echarts.apache.org/zh/option.html#series-funnel">漏斗图</a>，<a href="https://echarts.apache.org/zh/option.html#series-gauge">仪表盘</a>，并且支持图与图之间的混搭。</p><p>除了已经内置的包含了丰富功能的图表，ECharts 还提供了<a href="https://echarts.apache.org/zh/option.html#series-custom">自定义系列</a>，只需要传入一个<em>renderItem</em>函数，就可以从数据映射到任何你想要的图形，更棒的是这些都还能和已有的交互组件结合使用而不需要操心其它事情。</p><p>你可以在下载界面下载包含所有图表的构建文件，如果只是需要其中一两个图表，又嫌包含所有图表的构建文件太大，也可以在在线构建中选择需要的图表类型后自定义构建。</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE9&amp;#x2F;10&amp;#x2F;11，Chrome，Firefox，Safari 等），底层依赖矢量图形库 &lt;a href=&quot;https://github.com/ecomfe/zrender&quot;&gt;ZRender&lt;/a&gt;，提供直观，交互丰富，可高度个性化定制的数据可视化图表。&lt;/p&gt;
&lt;h2 id=&quot;丰富的可视化类型&quot;&gt;&lt;a href=&quot;#丰富的可视化类型&quot; class=&quot;headerlink&quot; title=&quot;丰富的可视化类型&quot;&gt;&lt;/a&gt;丰富的可视化类型&lt;/h2&gt;&lt;p&gt;ECharts 提供了常规的&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-line&quot;&gt;折线图&lt;/a&gt;、&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-bar&quot;&gt;柱状图&lt;/a&gt;、&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-scatter&quot;&gt;散点图&lt;/a&gt;、&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-pie&quot;&gt;饼图&lt;/a&gt;、&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-candlestick&quot;&gt;K 线图&lt;/a&gt;，用于统计的&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-boxplot&quot;&gt;盒形图&lt;/a&gt;，用于地理数据可视化的&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-map&quot;&gt;地图&lt;/a&gt;、&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-heatmap&quot;&gt;热力图&lt;/a&gt;、&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-lines&quot;&gt;线图&lt;/a&gt;，用于关系数据可视化的&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-graph&quot;&gt;关系图&lt;/a&gt;、&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-treemap&quot;&gt;treemap&lt;/a&gt;、&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-sunburst&quot;&gt;旭日图&lt;/a&gt;，多维数据可视化的&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-parallel&quot;&gt;平行坐标&lt;/a&gt;，还有用于 BI 的&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-funnel&quot;&gt;漏斗图&lt;/a&gt;，&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-gauge&quot;&gt;仪表盘&lt;/a&gt;，并且支持图与图之间的混搭。&lt;/p&gt;
&lt;p&gt;除了已经内置的包含了丰富功能的图表，ECharts 还提供了&lt;a href=&quot;https://echarts.apache.org/zh/option.html#series-custom&quot;&gt;自定义系列&lt;/a&gt;，只需要传入一个&lt;em&gt;renderItem&lt;/em&gt;函数，就可以从数据映射到任何你想要的图形，更棒的是这些都还能和已有的交互组件结合使用而不需要操心其它事情。&lt;/p&gt;
&lt;p&gt;你可以在下载界面下载包含所有图表的构建文件，如果只是需要其中一两个图表，又嫌包含所有图表的构建文件太大，也可以在在线构建中选择需要的图表类型后自定义构建。&lt;/p&gt;</summary>
    
    
    
    <category term="思米米的小安利" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E5%AE%89%E5%88%A9/"/>
    
    
    <category term="分享" scheme="https://www.simimi.cn/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>常用 Git 命令清单</title>
    <link href="https://www.simimi.cn/note/git-listing/"/>
    <id>https://www.simimi.cn/note/git-listing/</id>
    <published>2022-04-23T09:43:43.000Z</published>
    <updated>2022-04-23T09:43:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>我每天使用 Git ，但是很多命令记不住。</p><p>一般来说，日常使用只要记住下图 6 个命令，就可以了。但是熟练使用，恐怕要记住 60 ～ 100 个命令。</p><p><img src="http://img.simimi.cn/imgbg2015120901.png" alt="img" loading="lazy"></p><p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p><blockquote><ul><li>Workspace：工作区</li><li>Index &#x2F; Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul></blockquote><span id="more"></span><h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录新建一个Git代码库</span>$ <span class="token function">git</span> init<span class="token comment"># 新建一个目录，将其初始化为Git代码库</span>$ <span class="token function">git</span> init <span class="token punctuation">[</span>project-name<span class="token punctuation">]</span><span class="token comment"># 下载一个项目和它的整个代码历史</span>$ <span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git 的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示当前的Git配置</span>$ <span class="token function">git</span> config --list<span class="token comment"># 编辑Git配置文件</span>$ <span class="token function">git</span> config -e <span class="token punctuation">[</span>--global<span class="token punctuation">]</span><span class="token comment"># 设置提交代码时的用户信息</span>$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.name <span class="token string">"[name]"</span>$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.email <span class="token string">"[email address]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="三、增加-x2F-删除文件"><a href="#三、增加-x2F-删除文件" class="headerlink" title="三、增加&#x2F;删除文件"></a>三、增加&#x2F;删除文件</h2><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加指定文件到暂存区</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment"># 添加指定目录到暂存区，包括子目录</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token comment"># 添加当前目录的所有文件到暂存区</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 添加每个变化前，都会要求确认</span><span class="token comment"># 对于同一个文件的多处变化，可以实现分次提交</span>$ <span class="token function">git</span> <span class="token function">add</span> -p<span class="token comment"># 删除工作区文件，并且将这次删除放入暂存区</span>$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment"># 停止追踪指定文件，但该文件会保留在工作区</span>$ <span class="token function">git</span> <span class="token function">rm</span> --cached <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 改名文件，并且将这个改名放入暂存区</span>$ <span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file-original<span class="token punctuation">]</span> <span class="token punctuation">[</span>file-renamed<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 提交暂存区到仓库区</span>$ <span class="token function">git</span> commit -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment"># 提交暂存区的指定文件到仓库区</span>$ <span class="token function">git</span> commit <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>. -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span>$ <span class="token function">git</span> commit -a<span class="token comment"># 提交时显示所有diff信息</span>$ <span class="token function">git</span> commit -v<span class="token comment"># 使用一次新的commit，替代上一次提交</span><span class="token comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>$ <span class="token function">git</span> commit --amend -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment"># 重做上一次commit，并包括指定文件的新变化</span>$ <span class="token function">git</span> commit --amend <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有本地分支</span>$ <span class="token function">git</span> branch<span class="token comment"># 列出所有远程分支</span>$ <span class="token function">git</span> branch -r<span class="token comment"># 列出所有本地分支和远程分支</span>$ <span class="token function">git</span> branch -a<span class="token comment"># 新建一个分支，但依然停留在当前分支</span>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，并切换到该分支</span>$ <span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，指向指定commit</span>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，与指定的远程分支建立追踪关系</span>$ <span class="token function">git</span> branch --track <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment"># 切换到指定分支，并更新工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 切换到上一个分支</span>$ <span class="token function">git</span> checkout -<span class="token comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span>$ <span class="token function">git</span> branch --set-upstream <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment"># 合并指定分支到当前分支</span>$ <span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 选择一个commit，合并进当前分支</span>$ <span class="token function">git</span> cherry-pick <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 删除分支</span>$ <span class="token function">git</span> branch -d <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 删除远程分支</span>$ <span class="token function">git</span> push origin --delete <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>$ <span class="token function">git</span> branch -dr <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有tag</span>$ <span class="token function">git</span> tag<span class="token comment"># 新建一个tag在当前commit</span>$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 新建一个tag在指定commit</span>$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 删除本地tag</span>$ <span class="token function">git</span> tag -d <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 删除远程tag</span>$ <span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">[</span>tagName<span class="token punctuation">]</span><span class="token comment"># 查看tag信息</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 提交指定tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 提交所有tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --tags<span class="token comment"># 新建一个分支，指向某个tag</span>$ <span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示有变更的文件</span>$ <span class="token function">git</span> status<span class="token comment"># 显示当前分支的版本历史</span>$ <span class="token function">git</span> log<span class="token comment"># 显示commit历史，以及每次commit发生变更的文件</span>$ <span class="token function">git</span> log --stat<span class="token comment"># 搜索提交历史，根据关键词</span>$ <span class="token function">git</span> log -S <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span><span class="token comment"># 显示某个commit之后的所有变动，每个commit占据一行</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD --pretty<span class="token operator">=</span>format:%s<span class="token comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD --grep feature<span class="token comment"># 显示某个文件的版本历史，包括文件改名</span>$ <span class="token function">git</span> log --follow <span class="token punctuation">[</span>file<span class="token punctuation">]</span>$ <span class="token function">git</span> whatchanged <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示指定文件相关的每一次diff</span>$ <span class="token function">git</span> log -p <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示过去5次提交</span>$ <span class="token function">git</span> log -5 --pretty --oneline<span class="token comment"># 显示所有提交过的用户，按提交次数排序</span>$ <span class="token function">git</span> shortlog -sn<span class="token comment"># 显示指定文件是什么人在什么时间修改过</span>$ <span class="token function">git</span> blame <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示暂存区和工作区的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span><span class="token comment"># 显示暂存区和上一个commit的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> --cached <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示工作区与当前分支最新commit之间的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> HEAD<span class="token comment"># 显示两次提交之间的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>first-branch<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>second-branch<span class="token punctuation">]</span><span class="token comment"># 显示今天你写了多少行代码</span>$ <span class="token function">git</span> <span class="token function">diff</span> --shortstat <span class="token string">"@&#123;0 day ago&#125;"</span><span class="token comment"># 显示某次提交的元数据和内容变化</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 显示某次提交发生变化的文件</span>$ <span class="token function">git</span> show --name-only <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 显示某次提交时，某个文件的内容</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>:<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token comment"># 显示当前分支的最近几次提交</span>$ <span class="token function">git</span> reflog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载远程仓库的所有变动</span>$ <span class="token function">git</span> fetch <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment"># 显示所有远程仓库</span>$ <span class="token function">git</span> remote -v<span class="token comment"># 显示某个远程仓库的信息</span>$ <span class="token function">git</span> remote show <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment"># 增加一个新的远程仓库，并命名</span>$ <span class="token function">git</span> remote <span class="token function">add</span> <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment"># 取回远程仓库的变化，并与本地分支合并</span>$ <span class="token function">git</span> pull <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 上传本地指定分支到远程仓库</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 强行推送当前分支到远程仓库，即使有冲突</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --force<span class="token comment"># 推送所有分支到远程仓库</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 恢复暂存区的指定文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 恢复某个commit的指定文件到暂存区和工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>commit<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 恢复暂存区的所有文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token builtin class-name">.</span><span class="token comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 重置暂存区与工作区，与上一次commit保持一致</span>$ <span class="token function">git</span> reset --hard<span class="token comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>$ <span class="token function">git</span> reset --hard <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>$ <span class="token function">git</span> reset --keep <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 新建一个commit，用来撤销指定commit</span><span class="token comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>$ <span class="token function">git</span> revert <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 暂时将未提交的变化移除，稍后再移入</span>$ <span class="token function">git</span> stash$ <span class="token function">git</span> stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成一个可供发布的压缩包</span>$ <span class="token function">git</span> archive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>参考自阮一峰老师：<a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html"> 常用 Git 命令清单 </a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我每天使用 Git ，但是很多命令记不住。&lt;/p&gt;
&lt;p&gt;一般来说，日常使用只要记住下图 6 个命令，就可以了。但是熟练使用，恐怕要记住 60 ～ 100 个命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.simimi.cn/imgbg2015120901.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Workspace：工作区&lt;/li&gt;
&lt;li&gt;Index &amp;#x2F; Stage：暂存区&lt;/li&gt;
&lt;li&gt;Repository：仓库区（或本地仓库）&lt;/li&gt;
&lt;li&gt;Remote：远程仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Git" scheme="https://www.simimi.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>【分享】JavaScript ES6 入门教程</title>
    <link href="https://www.simimi.cn/share/js-es6/"/>
    <id>https://www.simimi.cn/share/js-es6/</id>
    <published>2022-04-23T09:29:15.000Z</published>
    <updated>2022-04-23T09:29:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript-6-简介"><a href="#ECMAScript-6-简介" class="headerlink" title="ECMAScript 6 简介"></a>ECMAScript 6 简介</h1><ol><li>[ ECMAScript 和 JavaScript 的关系](<a href="https://www.simimi.cn/es6/#docs/intro#ECMAScript">https://www.simimi.cn/es6/#docs/intro#ECMAScript</a> 和 JavaScript 的关系)</li><li>[ES6 与 ECMAScript 2015 的关系](<a href="https://www.simimi.cn/es6/#docs/intro#ES6">https://www.simimi.cn/es6/#docs/intro#ES6</a> 与 ECMAScript 2015 的关系)</li><li><a href="https://www.simimi.cn/es6/#docs/intro#%E8%AF%AD%E6%B3%95%E6%8F%90%E6%A1%88%E7%9A%84%E6%89%B9%E5%87%86%E6%B5%81%E7%A8%8B">语法提案的批准流程</a></li><li>[ECMAScript 的历史](<a href="https://www.simimi.cn/es6/#docs/intro#ECMAScript">https://www.simimi.cn/es6/#docs/intro#ECMAScript</a> 的历史)</li><li>[Babel 转码器](<a href="https://www.simimi.cn/es6/#docs/intro#Babel">https://www.simimi.cn/es6/#docs/intro#Babel</a> 转码器)</li></ol><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><p><img src="https://www.simimi.cn/es6/images/cover-3rd.jpg" alt="img" loading="lazy"></p><h2 id="ECMAScript-和-JavaScript-的关系"><a href="#ECMAScript-和-JavaScript-的关系" class="headerlink" title="ECMAScript 和 JavaScript 的关系"></a>ECMAScript 和 JavaScript 的关系</h2><p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p><p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p><p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。</p><p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ECMAScript-6-简介&quot;&gt;&lt;a href=&quot;#ECMAScript-6-简介&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript 6 简介&quot;&gt;&lt;/a&gt;ECMAScript 6 简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;[ ECMAScript 和 JavaScript 的关系](&lt;a href=&quot;https://www.simimi.cn/es6/#docs/intro#ECMAScript&quot;&gt;https://www.simimi.cn/es6/#docs/intro#ECMAScript&lt;/a&gt; 和 JavaScript 的关系)&lt;/li&gt;
&lt;li&gt;[ES6 与 ECMAScript 2015 的关系](&lt;a href=&quot;https://www.simimi.cn/es6/#docs/intro#ES6&quot;&gt;https://www.simimi.cn/es6/#docs/intro#ES6&lt;/a&gt; 与 ECMAScript 2015 的关系)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.simimi.cn/es6/#docs/intro#%E8%AF%AD%E6%B3%95%E6%8F%90%E6%A1%88%E7%9A%84%E6%89%B9%E5%87%86%E6%B5%81%E7%A8%8B&quot;&gt;语法提案的批准流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ECMAScript 的历史](&lt;a href=&quot;https://www.simimi.cn/es6/#docs/intro#ECMAScript&quot;&gt;https://www.simimi.cn/es6/#docs/intro#ECMAScript&lt;/a&gt; 的历史)&lt;/li&gt;
&lt;li&gt;[Babel 转码器](&lt;a href=&quot;https://www.simimi.cn/es6/#docs/intro#Babel&quot;&gt;https://www.simimi.cn/es6/#docs/intro#Babel&lt;/a&gt; 转码器)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.simimi.cn/es6/images/cover-3rd.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ECMAScript-和-JavaScript-的关系&quot;&gt;&lt;a href=&quot;#ECMAScript-和-JavaScript-的关系&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript 和 JavaScript 的关系&quot;&gt;&lt;/a&gt;ECMAScript 和 JavaScript 的关系&lt;/h2&gt;&lt;p&gt;一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？&lt;/p&gt;
&lt;p&gt;要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。&lt;/p&gt;
&lt;p&gt;该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。&lt;/p&gt;
&lt;p&gt;因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。&lt;/p&gt;</summary>
    
    
    
    <category term="思米米的小安利" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E5%AE%89%E5%88%A9/"/>
    
    
    <category term="JavaScript" scheme="https://www.simimi.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 的 this 原理</title>
    <link href="https://www.simimi.cn/note/js-this-principle/"/>
    <id>https://www.simimi.cn/note/js-this-principle/</id>
    <published>2022-04-23T09:10:58.000Z</published>
    <updated>2022-04-23T09:10:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、问题的由来"><a href="#一、问题的由来" class="headerlink" title="一、问题的由来"></a>一、问题的由来</h2><p>学懂 JavaScript 语言，一个标志就是理解下面两种写法，可能有不一样的结果。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token comment">// 写法一</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 写法二</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><span id="more"></span><p>上面代码中，虽然<code>obj.foo</code>和<code>foo</code>指向同一个函数，但是执行结果可能不一样。请看下面的例子。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token number">2</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>这种差异的原因，就在于函数体内部使用了<code>this</code>关键字。很多教科书会告诉你，<code>this</code>指的是函数运行时所在的环境。对于<code>obj.foo()</code>来说，<code>foo</code>运行在<code>obj</code>环境，所以<code>this</code>指向<code>obj</code>；对于<code>foo()</code>来说，<code>foo</code>运行在全局环境，所以<code>this</code>指向全局环境。所以，两者的运行结果不一样。</p><p>这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么<code>obj.foo()</code>就是在<code>obj</code>环境执行，而一旦<code>var foo = obj.foo</code>，<code>foo()</code>就变成在全局环境执行？</p><p>本文就来解释 JavaScript 这样处理的原理。理解了这一点，你就会彻底理解<code>this</code>的作用。</p><h2 id="二、内存的数据结构"><a href="#二、内存的数据结构" class="headerlink" title="二、内存的数据结构"></a>二、内存的数据结构</h2><p>JavaScript 语言之所以有<code>this</code>的设计，跟内存里面的数据结构有关系。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>上面的代码将一个对象赋值给变量<code>obj</code>。JavaScript 引擎会先在内存里面，生成一个对象<code>&#123; foo: 5 &#125;</code>，然后把这个对象的内存地址赋值给变量<code>obj</code>。</p><p><img src="https://www.wangbase.com/blogimg/asset/201806/bg2018061801.png" alt="img" loading="lazy"></p><p>也就是说，变量<code>obj</code>是一个地址（reference）。后面如果要读取<code>obj.foo</code>，引擎先从<code>obj</code>拿到内存地址，然后再从该地址读出原始的对象，返回它的<code>foo</code>属性。</p><p>原始的对象以字典结构保存，每一个属性名都对应一个属性描述对象。举例来说，上面例子的<code>foo</code>属性，实际上是以下面的形式保存的。</p><p><img src="https://www.wangbase.com/blogimg/asset/201806/bg2018061802.png" alt="img" loading="lazy"></p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">5</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>writable<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>enumerable<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>configurable<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>注意，<code>foo</code>属性的值保存在属性描述对象的<code>value</code>属性里面。</p><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><p>这样的结构是很清晰的，问题在于属性的值可能是一个函数。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给<code>foo</code>属性的<code>value</code>属性。</p><p><img src="https://www.wangbase.com/blogimg/asset/201806/bg2018061803.png" alt="img" loading="lazy"></p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> 函数的地址    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">f</span><span class="token operator">:</span> f <span class="token punctuation">&#125;</span><span class="token comment">// 单独执行</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// obj 环境执行</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="四、环境变量"><a href="#四、环境变量" class="headerlink" title="四、环境变量"></a>四、环境变量</h2><p>JavaScript 允许在函数体内部，引用当前环境的其他变量。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>上面代码中，函数体里面使用了变量<code>x</code>。该变量由运行环境提供。</p><p>现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，<code>this</code>就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>上面代码中，函数体里面的<code>this.x</code>就是指当前运行环境的<code>x</code>。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">f</span><span class="token operator">:</span> f<span class="token punctuation">,</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 单独执行</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span><span class="token comment">// obj 环境执行</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>上面代码中，函数<code>f</code>在全局环境执行，<code>this.x</code>指向全局环境的<code>x</code>。</p><p><img src="https://www.wangbase.com/blogimg/asset/201806/bg2018061804.png" alt="img" loading="lazy"></p><p>在<code>obj</code>环境执行，<code>this.x</code>指向<code>obj.x</code>。</p><p><img src="https://www.wangbase.com/blogimg/asset/201806/bg2018061805.png" alt="img" loading="lazy"></p><p>回到本文开头提出的问题，<code>obj.foo()</code>是通过<code>obj</code>找到<code>foo</code>，所以就是在<code>obj</code>环境执行。一旦<code>var foo = obj.foo</code>，变量<code>foo</code>就直接指向函数本身，所以<code>foo()</code>就变成在全局环境执行。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、问题的由来&quot;&gt;&lt;a href=&quot;#一、问题的由来&quot; class=&quot;headerlink&quot; title=&quot;一、问题的由来&quot;&gt;&lt;/a&gt;一、问题的由来&lt;/h2&gt;&lt;p&gt;学懂 JavaScript 语言，一个标志就是理解下面两种写法，可能有不一样的结果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class=&quot;line-numbers language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
	&lt;span class=&quot;token function-variable function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foo

&lt;span class=&quot;token comment&quot;&gt;// 写法一&lt;/span&gt;
obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 写法二&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="https://www.simimi.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript剪贴板的操作</title>
    <link href="https://www.simimi.cn/note/js-copy-clipboard-api/"/>
    <id>https://www.simimi.cn/note/js-copy-clipboard-api/</id>
    <published>2022-04-23T09:01:18.000Z</published>
    <updated>2022-04-23T09:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>浏览器允许 JavaScript 脚本读写剪贴板，自动复制或粘贴内容。</p><p>一般来说，脚本不应该改动用户的剪贴板，以免不符合用户的预期。但是，有些时候这样做确实能够带来方便，比如”一键复制”功能，用户点击一下按钮，指定的内容就自动进入剪贴板。</p><p>目前，一共有三种方法可以实现剪贴板操作。</p><blockquote><ul><li><code>Document.execCommand()</code>方法</li><li>异步的 Clipboard API</li><li><code>copy</code>事件和<code>paste</code>事件</li></ul></blockquote><p>本文逐一介绍这三种方法。</p><span id="more"></span><p><img src="https://www.wangbase.com/blogimg/asset/202101/bg2021012003.jpg" alt="img" loading="lazy"></p><h2 id="二、Document-execCommand-方法"><a href="#二、Document-execCommand-方法" class="headerlink" title="二、Document.execCommand() 方法"></a>二、Document.execCommand() 方法</h2><p><code>Document.execCommand()</code>是操作剪贴板的传统方法，各种浏览器都支持。</p><p>它支持复制、剪切和粘贴这三个操作。</p><blockquote><ul><li><code>document.execCommand(&#39;copy&#39;)</code>（复制）</li><li><code>document.execCommand(&#39;cut&#39;)</code>（剪切）</li><li><code>document.execCommand(&#39;paste&#39;)</code>（粘贴）</li></ul></blockquote><p>（1）复制操作</p><p>复制时，先选中文本，然后调用<code>document.execCommand(&#39;copy&#39;)</code>，选中的文本就会进入剪贴板。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> inputElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#input'</span><span class="token punctuation">)</span>inputElement<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>上面示例中，脚本先选中输入框<code>inputElement</code>里面的文字（<code>inputElement.select()</code>），然后<code>document.execCommand(&#39;copy&#39;)</code>将其复制到剪贴板。</p><p>注意，复制操作最好放在事件监听函数里面，由用户触发（比如用户点击按钮）。如果脚本自主执行，某些浏览器可能会报错。</p><p>（2）粘贴操作</p><p>粘贴时，调用<code>document.execCommand(&#39;paste&#39;)</code>，就会将剪贴板里面的内容，输出到当前的焦点元素中。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> pasteText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#output'</span><span class="token punctuation">)</span>pasteText<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'paste'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>（3）缺点</p><p><code>Document.execCommand()</code>方法虽然方便，但是有一些缺点。</p><p>首先，它只能将选中的内容复制到剪贴板，无法向剪贴板任意写入内容。</p><p>其次，它是同步操作，如果复制&#x2F;粘贴大量数据，页面会出现卡顿。有些浏览器还会跳出提示框，要求用户许可，这时在用户做出选择前，页面会失去响应。</p><p>为了解决这些问题，浏览器厂商提出了异步的 Clipboard API。</p><h2 id="三、异步-Clipboard-API"><a href="#三、异步-Clipboard-API" class="headerlink" title="三、异步 Clipboard API"></a>三、异步 Clipboard API</h2><p>Clipboard API 是下一代的剪贴板操作方法，比传统的<code>document.execCommand()</code>方法更强大、更合理。</p><p>它的所有操作都是异步的，返回 Promise 对象，不会造成页面卡顿。而且，它可以将任意内容（比如图片）放入剪贴板。</p><p><code>navigator.clipboard</code>属性返回 Clipboard 对象，所有操作都通过这个对象进行。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> clipboardObj <span class="token operator">=</span> navigator<span class="token punctuation">.</span>clipboard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>如果<code>navigator.clipboard</code>属性返回<code>undefined</code>，就说明当前浏览器不支持这个 API。</p><p>由于用户可能把敏感数据（比如密码）放在剪贴板，允许脚本任意读取会产生安全风险，所以这个 API 的安全限制比较多。</p><p>首先，Chrome 浏览器规定，只有 HTTPS 协议的页面才能使用这个 API。不过，开发环境（<code>localhost</code>）允许使用非加密协议。</p><p>其次，调用时需要明确获得用户的许可。权限的具体实现使用了 Permissions API，跟剪贴板相关的有两个权限：<code>clipboard-write</code>（写权限）和<code>clipboard-read</code>（读权限）。”写权限”自动授予脚本，而”读权限”必须用户明确同意给予。也就是说，写入剪贴板，脚本可以自动完成，但是读取剪贴板时，浏览器会弹出一个对话框，询问用户是否同意读取。</p><p><img src="https://www.wangbase.com/blogimg/asset/202101/bg2021012004.jpg" alt="img" loading="lazy"></p><p>另外，需要注意的是，脚本读取的总是当前页面的剪贴板。这带来的一个问题是，如果把相关的代码粘贴到开发者工具中直接运行，可能会报错，因为这时的当前页面是开发者工具的窗口，而不是网页页面。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>如果你把上面的代码，粘贴到开发者工具里面运行，就会报错。因为代码运行的时候，开发者工具窗口是当前页，这个页面不存在 Clipboard API 依赖的 DOM 接口。一个解决方法就是，相关代码放到<code>setTimeout()</code>里面延迟运行，在调用函数之前快速点击浏览器的页面窗口，将其变成当前页。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>上面代码粘贴到开发者工具运行后，快速点击一下网页的页面窗口，使其变为当前页，这样就不会报错了。</p><h2 id="四、Clipboard-对象"><a href="#四、Clipboard-对象" class="headerlink" title="四、Clipboard 对象"></a>四、Clipboard 对象</h2><p>Clipboard 对象提供了四个方法，用来读写剪贴板。它们都是异步方法，返回 Promise 对象。</p><h3 id="4-1-Clipboard-readText"><a href="#4-1-Clipboard-readText" class="headerlink" title="4.1 Clipboard.readText()"></a>4.1 Clipboard.readText()</h3><p><code>Clipboard.readText()</code>方法用于复制剪贴板里面的文本数据。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>上面示例中，用户点击页面后，就会输出剪贴板里面的文本。注意，浏览器这时会跳出一个对话框，询问用户是否同意脚本读取剪贴板。</p><p>如果用户不同意，脚本就会报错。这时，可以使用<code>try...catch</code>结构，处理报错。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getClipboardContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Pasted content: '</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Failed to read clipboard contents: '</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-2-Clipboard-read"><a href="#4-2-Clipboard-read" class="headerlink" title="4.2 Clipboard.read()"></a>4.2 Clipboard.read()</h3><p><code>Clipboard.read()</code>方法用于复制剪贴板里面的数据，可以是文本数据，也可以是二进制数据（比如图片）。该方法需要用户明确给予许可。</p><p>该方法返回一个 Promise 对象。一旦该对象的状态变为 resolved，就可以获得一个数组，每个数组成员都是 ClipboardItem 对象的实例。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getClipboardContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> clipboardItems <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> clipboardItem <span class="token keyword">of</span> clipboardItems<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> type <span class="token keyword">of</span> clipboardItem<span class="token punctuation">.</span>types<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">await</span> clipboardItem<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>name<span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>ClipboardItem 对象表示一个单独的剪贴项，每个剪贴项都拥有<code>ClipboardItem.types</code>属性和<code>ClipboardItem.getType()</code>方法。</p><p><code>ClipboardItem.types</code>属性返回一个数组，里面的成员是该剪贴项可用的 MIME 类型，比如某个剪贴项可以用 HTML 格式粘贴，也可以用纯文本格式粘贴，那么它就有两个 MIME 类型（<code>text/html</code>和<code>text/plain</code>）。</p><p><code>ClipboardItem.getType(type)</code>方法用于读取剪贴项的数据，返回一个 Promise 对象。该方法接受剪贴项的 MIME 类型作为参数，返回该类型的数据，该参数是必需的，否则会报错。</p><h3 id="4-3-Clipboard-writeText"><a href="#4-3-Clipboard-writeText" class="headerlink" title="4.3 Clipboard.writeText()"></a>4.3 Clipboard.writeText()</h3><p><code>Clipboard.writeText()</code>方法用于将文本内容写入剪贴板。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span><span class="token string">'Yo'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>上面示例是用户在网页点击后，脚本向剪贴板写入文本数据。</p><p>该方法不需要用户许可，但是最好也放在<code>try...catch</code>里面防止报错。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">copyPageUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Page URL copied to clipboard'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Failed to copy: '</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-4-Clipboard-write"><a href="#4-4-Clipboard-write" class="headerlink" title="4.4 Clipboard.write()"></a>4.4 Clipboard.write()</h3><p><code>Clipboard.write()</code>方法用于将任意数据写入剪贴板，可以是文本数据，也可以是二进制数据。</p><p>该方法接受一个 ClipboardItem 实例作为参数，表示写入剪贴板的数据。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> imgURL <span class="token operator">=</span> <span class="token string">'https://dummyimage.com/300.png'</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>imgURL<span class="token punctuation">)</span><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">await</span> data<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ClipboardItem</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>blob<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token operator">:</span> blob<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Image copied.'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>name<span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>上面示例中，脚本向剪贴板写入了一张图片。注意，Chrome 浏览器目前只支持写入 PNG 格式的图片。</p><p><code>ClipboardItem()</code>是浏览器原生提供的构造函数，用来生成<code>ClipboardItem</code>实例，它接受一个对象作为参数，该对象的键名是数据的 MIME 类型，键值就是数据本身。</p><p>下面的例子是将同一个剪贴项的多种格式的值，写入剪贴板，一种是文本数据，另一种是二进制数据，供不同的场合粘贴使用。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'kitten.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Cute sleeping kitten'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/plain'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClipboardItem</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">'text/plain'</span><span class="token operator">:</span> text<span class="token punctuation">,</span>    <span class="token string-property property">'image/png'</span><span class="token operator">:</span> image  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="五、copy-事件，cut-事件"><a href="#五、copy-事件，cut-事件" class="headerlink" title="五、copy 事件，cut 事件"></a>五、copy 事件，cut 事件</h2><p>用户向剪贴板放入数据时，将触发<code>copy</code>事件。</p><p>下面的示例是将用户放入剪贴板的文本，转为大写。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> source <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.source'</span><span class="token punctuation">)</span>source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> selection <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>event<span class="token punctuation">.</span>clipboardData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'text/plain'</span><span class="token punctuation">,</span>selection<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>上面示例中，事件对象的<code>clipboardData</code>属性包含了剪贴板数据。它是一个对象，有以下属性和方法。</p><blockquote><ul><li><code>Event.clipboardData.setData(type, data)</code>：修改剪贴板数据，需要指定数据类型。</li><li><code>Event.clipboardData.getData(type)</code>：获取剪贴板数据，需要指定数据类型。</li><li><code>Event.clipboardData.clearData([type])</code>：清除剪贴板数据，可以指定数据类型。如果不指定类型，将清除所有类型的数据。</li><li><code>Event.clipboardData.items</code>：一个类似数组的对象，包含了所有剪贴项，不过通常只有一个剪贴项。</li></ul></blockquote><p>下面的示例是拦截用户的复制操作，将指定内容放入剪贴板。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> clipboardItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> clipboardItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> e<span class="token punctuation">.</span>clipboardData<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'image/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span>clipboardItems<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClipboardItem</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>item<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token operator">:</span> item<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>clipboardItems<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Image copied.'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>name<span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>上面示例中，先使用<code>e.preventDefault()</code>取消了剪贴板的默认操作，然后由脚本接管复制操作。</p><p><code>cut</code>事件则是在用户进行剪切操作时触发，它的处理跟<code>copy</code>事件完全一样，也是从<code>Event.clipboardData</code>属性拿到剪切的数据。</p><h2 id="六、paste-事件"><a href="#六、paste-事件" class="headerlink" title="六、paste 事件"></a>六、paste 事件</h2><p>用户使用剪贴板数据，进行粘贴操作时，会触发<code>paste</code>事件。</p><p>下面的示例是拦截粘贴操作，由脚本将剪贴板里面的数据取出来。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'paste'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Pasted text: '</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="七、参考链接"><a href="#七、参考链接" class="headerlink" title="七、参考链接"></a>七、参考链接</h2><ul><li><a href="https://web.dev/async-clipboard/">Unblocking clipboard access</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard">Interact with the clipboard</a></li><li><a href="https://blog.tomayac.com/2020/03/20/multi-mime-type-copying-with-the-async-clipboard-api/">Multi-MIME Type Copying with the Async Clipboard API</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;浏览器允许 JavaScript 脚本读写剪贴板，自动复制或粘贴内容。&lt;/p&gt;
&lt;p&gt;一般来说，脚本不应该改动用户的剪贴板，以免不符合用户的预期。但是，有些时候这样做确实能够带来方便，比如”一键复制”功能，用户点击一下按钮，指定的内容就自动进入剪贴板。&lt;/p&gt;
&lt;p&gt;目前，一共有三种方法可以实现剪贴板操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Document.execCommand()&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;异步的 Clipboard API&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;事件和&lt;code&gt;paste&lt;/code&gt;事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文逐一介绍这三种方法。&lt;/p&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="https://www.simimi.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 侦测手机浏览器的五种方法</title>
    <link href="https://www.simimi.cn/note/js-ismobile/"/>
    <id>https://www.simimi.cn/note/js-ismobile/</id>
    <published>2022-04-23T08:04:48.000Z</published>
    <updated>2022-04-23T08:04:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，前端网页需要知道，用户使用的是手机浏览器还是桌面浏览器。</p><p>本文根据 <a href="https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser">StackOverflow</a>，整理了 JavaScript 侦测手机浏览器的五种方法。</p><p><img src="http://img.simimi.cn/imgbg2021092717.jpg" alt="img" loading="lazy"></p><span id="more"></span><h2 id="一、navigator-userAgent"><a href="#一、navigator-userAgent" class="headerlink" title="一、navigator.userAgent"></a>一、navigator.userAgent</h2><p>最简单的方法就是分析浏览器的 user agent 字符串，它包含了设备信息。</p><p>JS 通过<code>navigator.userAgent</code>属性拿到这个字符串，只要里面包含<code>mobi</code>、<code>android</code>、<code>iphone</code>等关键字，就可以认定是移动设备。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Mobi|Android|iPhone</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当前设备是移动设备</span><span class="token punctuation">&#125;</span><span class="token comment">// 另一种写法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Mobi</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span> <span class="token operator">||</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Android</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span> <span class="token operator">||</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">iPhone</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当前设备是移动设备</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>这种方法的优点是简单方便，缺点是不可靠，因为用户可以修改这个字符串，让手机浏览器伪装成桌面浏览器。</p><p>Chromium 系的浏览器，还有一个<code>navigator.userAgentData</code>属性，也是类似的作用。不同之处是它将 user agent 字符串解析为一个对象，该对象的<code>mobile</code>属性，返回一个布尔值，表示用户是否使用移动设备。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isMobile <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgentData<span class="token punctuation">.</span>mobile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>注意，苹果的 Safari 浏览器和 Firefox 浏览器都不支持这个属性，具体情况可以查看 <a href="https://caniuse.com/mdn-api_navigator_useragentdata">Caniuse 网站</a>。</p><p>此外，还有一个已经废除的<a href="https://stackoverflow.com/questions/19877924/what-is-the-list-of-possible-values-for-navigator-platform-as-of-today"><code>navigator.platform</code>属性</a>，所有浏览器都支持，所以也可以用。它返回一个字符串，表示用户的操作系统。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Android|iPhone|iPad|iPod</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>platform<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当前设备是移动设备</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="二、window-screen，window-innerWidth"><a href="#二、window-screen，window-innerWidth" class="headerlink" title="二、window.screen，window.innerWidth"></a>二、window.screen，window.innerWidth</h2><p>另一种方法是通过屏幕宽度，判断是否为手机。</p><p><code>window.screen</code>对象返回用户设备的屏幕信息，该对象的<code>width</code>属性是屏幕宽度（单位为像素）。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当前设备是移动设备</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>上面示例中，如果屏幕宽度<code>window.screen.width</code>小于 500 像素，就认为是手机。</p><p>这个方法的缺点在于，如果手机横屏使用，就识别不了。</p><p>另一个属性<code>window.innerWidth</code>返回浏览器窗口里面的网页可见部分的宽度，比较适合指定网页在不同宽度下的样式。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getBrowserWidth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">&lt;</span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">'xs'</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">&lt;</span> <span class="token number">991</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">'sm'</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">&lt;</span> <span class="token number">1199</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">'md'</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">'lg'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="三、window-orientation"><a href="#三、window-orientation" class="headerlink" title="三、window.orientation"></a>三、window.orientation</h2><p>第三种方法是侦测屏幕方向，手机屏幕可以随时改变方向（横屏或竖屏），桌面设备做不到。</p><p><code>window.orientation</code>属性用于获取屏幕的当前方向，只有移动设备才有这个属性，桌面设备会返回<code>undefined</code>。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>orientation <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当前设备是移动设备</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>注意，iPhone 的 Safari 浏览器不支持该属性。</p><h2 id="四、touch-事件"><a href="#四、touch-事件" class="headerlink" title="四、touch 事件"></a>四、touch 事件</h2><p>第四种方法是，手机浏览器的 DOM 元素可以通过<code>ontouchstart</code>属性，为<code>touch</code>事件指定监听函数。桌面设备没有这个属性。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">'ontouchstart'</span> <span class="token keyword">in</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">&#125;</span><span class="token comment">// 另一种写法</span><span class="token keyword">function</span> <span class="token function">isMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token string">'TouchEvent'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="五、window-matchMedia"><a href="#五、window-matchMedia" class="headerlink" title="五、window.matchMedia()"></a>五、window.matchMedia()</h2><p>最后一种方法是结合 CSS 来判断。</p><p>CSS 通过 media query（媒介查询）为网页指定响应式样式。如果某个针对手机的 media query 语句生效了，就可以认为当前设备是移动设备。</p><p><code>window.matchMedia()</code>方法接受一个 CSS 的 media query 语句作为参数，判断这个语句是否生效。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> isMobile <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'only screen and (max-width: 760px)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>上面示例中，<code>window.matchMedia()</code>的参数是一个 CSS 查询语句，表示只对屏幕宽度不超过 700 像素的设备生效。它返回一个对象，该对象的<code>matches</code>属性是一个布尔值。如果是<code>true</code>，就表示查询生效，当前设备是手机。</p><p>除了通过屏幕宽度判断，还可以通过指针的精确性判断。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> isMobile <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(pointer:coarse)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>上面示例中，CSS 语句<code>pointer:coarse</code>表示当前设备的指针是不精确的。由于手机不支持鼠标，只支持触摸，所以符合这个条件。</p><p>有些设备支持多种指针，比如同时支持鼠标和触摸。<code>pointer:coarse</code>只用来判断主指针，此外还有一个<code>any-pointer</code>命令判断所有指针。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> isMobile <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(any-pointer:coarse)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>上面示例中，<code>any-pointer:coarse</code>表示所有指针里面，只要有一个指针是不精确的，就符合查询条件。</p><h2 id="六、工具包"><a href="#六、工具包" class="headerlink" title="六、工具包"></a>六、工具包</h2><p>除了上面这些方法，也可以使用别人写好的工具包。这里推荐 <a href="https://www.npmjs.com/package/react-device-detect">react-device-detect</a>，它支持多种粒度的设备侦测。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isMobile <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-device-detect'</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isMobile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当前设备是移动设备</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时候，前端网页需要知道，用户使用的是手机浏览器还是桌面浏览器。&lt;/p&gt;
&lt;p&gt;本文根据 &lt;a href=&quot;https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser&quot;&gt;StackOverflow&lt;/a&gt;，整理了 JavaScript 侦测手机浏览器的五种方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.simimi.cn/imgbg2021092717.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="前端" scheme="https://www.simimi.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://www.simimi.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>一行代码禁止页面复制、右键</title>
    <link href="https://www.simimi.cn/note/js-nocopy/"/>
    <id>https://www.simimi.cn/note/js-nocopy/</id>
    <published>2022-04-03T05:56:38.000Z</published>
    <updated>2022-04-03T05:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>找到 html 文件的<code>&lt;/head&gt;</code>标签,在<code>&lt;/head&gt;</code>前面加如下代码就行了！</p><span id="more"></span><h2 id="一行代码禁止页面复制、右键"><a href="#一行代码禁止页面复制、右键" class="headerlink" title="一行代码禁止页面复制、右键"></a>一行代码禁止页面复制、右键</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//禁止用户复制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">-khtml-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>// 禁止用户右键<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">langauge</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;找到 html 文件的&lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt;标签,在&lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt;前面加如下代码就行了！&lt;/p&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="前端" scheme="https://www.simimi.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://www.simimi.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法的基本使用</title>
    <link href="https://www.simimi.cn/note/markdown-basic-syntax/"/>
    <id>https://www.simimi.cn/note/markdown-basic-syntax/</id>
    <published>2022-02-14T02:21:10.000Z</published>
    <updated>2022-05-09T02:21:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>.md 即 markdown 文件的基本常用编写语法,是一种快速标记、快速排版语言，现在很多前段项目中的说明文件 readme 等都是用.md 文件编写的，而且很多企业也在在鼓励使用这种编辑方式，特别作为一个前端从业者更要学会使用这种语言。下面就简单和大家分享一些.md 基本语法</p><span id="more"></span><h2 id="一、基本符号：-gt"><a href="#一、基本符号：-gt" class="headerlink" title="一、基本符号：* - + . &gt;"></a>一、基本符号：* - + . &gt;</h2><p>基本上所有的 markdown 标记都是基于这四个符号或组合，需要注意的是，如果以基本符号开头的标记，注意基本符号后有一个用于分割标记符和内容的空格。</p><h2 id="二、标题"><a href="#二、标题" class="headerlink" title="二、标题"></a>二、标题</h2><p>前面带#号，后面带文字，分别表示 h1-h6,只到 h6，而且 h1 下面会有一条横线。</p><pre class="line-numbers language-none"><code class="language-none"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tip：符号后面要带空格，不然 MD 语法不生效。</p><h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><pre class="line-numbers language-none"><code class="language-none">+ a+ b+ c- d- e- f* g* h* i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>a</li><li>b</li><li>c</li></ul><ul><li>d</li><li>e</li><li>f</li></ul><ul><li>g</li><li>h</li><li>i</li></ul><p>以上三种形式，效果都是一样的，大家选择适合自己的就好了。</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><pre class="line-numbers language-none"><code class="language-none">正常1. a2. b3. c错序2. a3. b5. c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>a</p></li><li><p>b</p></li><li><p>c</p></li><li><p>a</p></li><li><p>b</p></li><li><p>c</p></li></ol><p>注意，数字后面的点只能是英文的点，有序列表的序号是根据第一行列表的数字顺序来的，错序列表的序号本来是序号是乱的， 但是还是显示 2 3 5</p><h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><p>列表可以嵌套，使用时在嵌套列表前按 tab 或 空格 来缩进,去控制列表的层数</p><pre class="line-numbers language-none"><code class="language-none">+ a+ b+ c    - d    - e    - f        * g        * h        * i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>a</p></li><li><p>b</p></li><li><p>c</p><ul><li><p>d</p></li><li><p>e</p></li><li><p>f</p><ul><li>g</li><li>h</li><li>i</li></ul></li></ul></li></ul><h2 id="四、引用说明区块"><a href="#四、引用说明区块" class="headerlink" title="四、引用说明区块"></a>四、引用说明区块</h2><p>对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语法。</p><h3 id="正常形式"><a href="#正常形式" class="headerlink" title="正常形式"></a>正常形式</h3><pre class="line-numbers language-none"><code class="language-none">&gt; 引用内容、说明内容。在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>引用内容、说明内容。在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。</p></blockquote><h3 id="嵌套区块"><a href="#嵌套区块" class="headerlink" title="嵌套区块"></a>嵌套区块</h3><p>这里我只介绍一下我常用的方法，也是个人认为比较规范的一种方法，就是给区块的下一级区块多加一个右尖括号</p><pre class="line-numbers language-none"><code class="language-none">&gt; 一级引用&gt;&gt; 二级引用&gt;&gt;&gt; 三级引用&gt;&gt;&gt;&gt; 四级引用&gt;&gt;&gt;&gt;&gt; 五级引用&gt;&gt;&gt;&gt;&gt;&gt; 六级引用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p><blockquote><p>四级引用</p><blockquote><p>五级引用</p><blockquote><p>六级引用</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="五、代码块"><a href="#五、代码块" class="headerlink" title="五、代码块"></a>五、代码块</h2><p>在发布一些技术文章会涉及展示代码的问题，这时候代码块就显得尤为重要。</p><p>少量代码，单行使用，直接用&#96;包裹起来就行了</p><pre class="line-numbers language-none"><code class="language-none">&#96; shaoliangdaima,danhangshiyong &#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>shaoliangdaima,danhangshiyong</code></p><p>大量代码，需要多行使用，用&#96;&#96;&#96;包裹起来</p><pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;        daliangdaima,xuyaoduohangshiyong        daliangdaima,xuyaoduohangshiyong        daliangdaima,xuyaoduohangshiyong        daliangdaima,xuyaoduohangshiyong        daliangdaima,xuyaoduohangshiyong&#96;&#96;&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">        daliangdaima,xuyaoduohangshiyong        daliangdaima,xuyaoduohangshiyong        daliangdaima,xuyaoduohangshiyong        daliangdaima,xuyaoduohangshiyong        daliangdaima,xuyaoduohangshiyong<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、链接"><a href="#六、链接" class="headerlink" title="六、链接"></a>六、链接</h2><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><p>链接的文字放在[]中，链接地址放在随后的()中，链接也可以带 title 属性，链接地址后面空一格，然后用引号引起来</p><pre class="line-numbers language-none"><code class="language-none">[链接名称](链接地址)[思米米](https:&#x2F;&#x2F;www.simimi.cn&quot;欢迎&quot;),是一分享各类技术的博客，欢迎大家访问、收藏。或&lt;链接地址&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.simimi.cn"欢迎"/">思米米</a>,是一分享各类技术的博客，欢迎大家访问、收藏。<br><br/><br><a href="https://www.simimi.cn/">https://www.simimi.cn</a><br><br/></p><h3 id="参数式"><a href="#参数式" class="headerlink" title="参数式"></a>参数式</h3><pre class="line-numbers language-none"><code class="language-none">[about]: https:&#x2F;&#x2F;www.simimi.cn&#x2F;about &quot;思米米的about&quot;[archives]: https:&#x2F;&#x2F;www.simimi.cn&#x2F;archives &quot;归档&quot;[categories]: https:&#x2F;&#x2F;www.simimi.cn&#x2F;categories &quot;分类&quot;[中文]: https:&#x2F;&#x2F;www.simimi.cn &quot;思米米&quot;这里是[about],这是[archives],这是[categories],还支持中文[中文]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是<a href="https://www.simimi.cn/about" title="思米米的about">about</a>,这是<a href="https://www.simimi.cn/archives" title="归档">archives</a>,这是<a href="https://www.simimi.cn/categories" title="分类">categories</a>,还支持中文<a href="https://www.simimi.cn/" title="思米米">中文</a></p><h2 id="七、图片"><a href="#七、图片" class="headerlink" title="七、图片"></a>七、图片</h2><h3 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h3><pre><code>+ 开头一个感叹号 !+ 接着一个方括号，里面放上图片的替代文字+ 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 &#39;title&#39; 属性的文字。</code></pre><pre class="line-numbers language-none"><code class="language-none">![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="思米米" loading="lazy"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="思米米" title="alt属性" loading="lazy"></p><h3 id="参数式-1"><a href="#参数式-1" class="headerlink" title="参数式"></a>参数式</h3><pre class="line-numbers language-none"><code class="language-none">[simimi]: http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png参数式图片，这里是![simimi]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数式图片，这里是<img src="http://static.runoob.com/images/runoob-logo.png" alt="simimi" loading="lazy"></p><p>用法跟链接的基本一样，唯一的不同就是，图片前面要写一个！（这是必须的），没什么好说的</p><h2 id="八、分割线"><a href="#八、分割线" class="headerlink" title="八、分割线"></a>八、分割线</h2><p>分割线可以由* - _（星号，减号，底线）这 3 个符号的至少 3 个符号表示，注意至少要 3 个，且不需要连续，有空格也可以</p><pre class="line-numbers language-none"><code class="language-none">---- - -------**** * *******____ _ _______<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><hr><hr><hr><hr><hr><hr><hr><h2 id="九、Markdown-高级技巧"><a href="#九、Markdown-高级技巧" class="headerlink" title="九、Markdown 高级技巧"></a>九、Markdown 高级技巧</h2><h3 id="强调字体"><a href="#强调字体" class="headerlink" title="强调字体"></a>强调字体</h3><p>一个星号或者是一个下划线包起来，会转换为倾斜，如果是 2 个，会转换为加粗</p><pre class="line-numbers language-none"><code class="language-none">*md*   **md**_md_ __md__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>md</em></p><p><strong>md</strong></p><p><em>md</em></p><p><strong>md</strong></p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>基本上和 js 转义一样,\加需要转义的字符</p><pre class="line-numbers language-none"><code class="language-none">\\\*\+\-\&#96;\_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>\</p><p>*</p><p>+</p><p>-</p><p>`</p><p>_</p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>用~~把需要显示删除线的字符包裹起来</p><pre class="line-numbers language-none"><code class="language-none">~~删除~~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><del>删除</del></p><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：</p><pre class="line-numbers language-none"><code class="language-none">&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<kbd>Ctrl</kbd>+<kbd>D</kbd> 收藏本页面</p><h2 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h2><pre class="line-numbers language-none"><code class="language-none">|表头|表头|表头||:-|:-:|-:||abc|bcd|cde||abc|bcd|cde||abc|bcd|cde||表头|表头|表头||:---|:---:|---:||abc|bcd|cde||abc|bcd|cde||abc|bcd|cde|表头|表头|表头:-|:-:|-:abc|bcd|cdeabc|bcd|cdeabc|bcd|cde<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr></tbody></table><br/>|表头|表头|表头||:---|:---:|---:||abc|bcd|cde||abc|bcd|cde||abc|bcd|cde|<br/>表头|表头|表头:-|:-:|-:abc|bcd|cdeabc|bcd|cdeabc|bcd|cde<p>上面三个例子的效果一样，由此可得：</p><ol><li><p>表格的格式不一定要对的非常起，但是为了良好的变成风格，尽量对齐是最好的</p></li><li><p>分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;.md 即 markdown 文件的基本常用编写语法,是一种快速标记、快速排版语言，现在很多前段项目中的说明文件 readme 等都是用.md 文件编写的，而且很多企业也在在鼓励使用这种编辑方式，特别作为一个前端从业者更要学会使用这种语言。下面就简单和大家分享一些.md 基本语法&lt;/p&gt;</summary>
    
    
    
    <category term="思米米的小分享" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Markdown" scheme="https://www.simimi.cn/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>使用Alook浏览器获取京东Cookie</title>
    <link href="https://www.simimi.cn/tutorial/jdcookie/"/>
    <id>https://www.simimi.cn/tutorial/jdcookie/</id>
    <published>2022-02-14T02:21:10.000Z</published>
    <updated>2022-05-09T02:21:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>获取京东 Cookie，不需要抓包软件</p><p>上传 Cookie 到服务器</p><h3 id="获取到-Cookie-请到网页自行上传-https-jd-simimi-cn"><a href="#获取到-Cookie-请到网页自行上传-https-jd-simimi-cn" class="headerlink" title="获取到 Cookie 请到网页自行上传 https://jd.simimi.cn"></a>获取到 Cookie 请到网页自行上传 <a href="https://jd.simimi.cn/">https://jd.simimi.cn</a></h3><ul><li>可注册登陆或游客上传，推荐注册登陆后上传 Cookie，方便自行管理，查看京东收入情况,更新添加 Cookie 等</li></ul><h3 id="QQ-群：769194788-点此入群"><a href="#QQ-群：769194788-点此入群" class="headerlink" title="QQ 群：769194788 点此入群"></a>QQ 群：769194788 <a href="https://jq.qq.com/?_wv=1027&k=mpP6nr1U">点此入群</a></h3><ul><li>请务必进群</li></ul><span id="more"></span><hr><h2 id="一、下载-Alook-浏览器"><a href="#一、下载-Alook-浏览器" class="headerlink" title="一、下载 Alook 浏览器"></a>一、下载 Alook 浏览器</h2><p>应用商店自行搜索下载</p><h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-浏览器地址栏搜索-m-jd-com-进入京东官网"><a href="#1-浏览器地址栏搜索-m-jd-com-进入京东官网" class="headerlink" title="1.浏览器地址栏搜索 m.jd.com 进入京东官网"></a>1.浏览器地址栏搜索 m.jd.com 进入京东官网</h2><p><img src="https://img-blog.csdnimg.cn/b4fff442f87d4388a05c1a1f7ef3e3cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATUlLRS1vbmU=,size_20,color_FFFFFF,t_70,g_se,x_16" loading="lazy"></p><h2 id="2-登录京东后，点击下方三条横杠"><a href="#2-登录京东后，点击下方三条横杠" class="headerlink" title="2.登录京东后，点击下方三条横杠"></a>2.登录京东后，点击下方三条横杠</h2><p><img src="https://img-blog.csdnimg.cn/cdc9336b2d9e493dba8fe049ec7f3927.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATUlLRS1vbmU=,size_20,color_FFFFFF,t_70,g_se,x_16" loading="lazy"></p><h2 id="3，选择-：工具箱"><a href="#3，选择-：工具箱" class="headerlink" title="3，选择 ：工具箱"></a>3，选择 ：工具箱</h2><p><img src="https://img-blog.csdnimg.cn/decdf0abbfdf4fd48dbd8d38a92a0289.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATUlLRS1vbmU=,size_20,color_FFFFFF,t_70,g_se,x_16" loading="lazy"></p><h2 id="4，选择开发者工具"><a href="#4，选择开发者工具" class="headerlink" title="4，选择开发者工具"></a>4，选择开发者工具</h2><p><img src="https://img-blog.csdnimg.cn/7a14308a85854530bc8f99a123c9ebe0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATUlLRS1vbmU=,size_20,color_FFFFFF,t_70,g_se,x_16" loading="lazy"></p><h2 id="5，选择-Cookie"><a href="#5，选择-Cookie" class="headerlink" title="5，选择 Cookie"></a>5，选择 Cookie</h2><p><img src="https://img-blog.csdnimg.cn/ead7881fd5864da885dc945881d8e5a0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATUlLRS1vbmU=,size_20,color_FFFFFF,t_70,g_se,x_16" loading="lazy"></p><h2 id="6，复制即可"><a href="#6，复制即可" class="headerlink" title="6，复制即可"></a>6，复制即可</h2><p><img src="https://img-blog.csdnimg.cn/b7c6cca0178a43d2827ca56f783f9510.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATUlLRS1vbmU=,size_20,color_FFFFFF,t_70,g_se,x_16" loading="lazy"></p><h2 id="7，上传-Cookie-到服务器"><a href="#7，上传-Cookie-到服务器" class="headerlink" title="7，上传 Cookie 到服务器"></a>7，上传 Cookie 到服务器</h2><h3 id="网页自行上传-https-jd-simimi-cn"><a href="#网页自行上传-https-jd-simimi-cn" class="headerlink" title="网页自行上传 https://jd.simimi.cn"></a>网页自行上传 <a href="https://jd.simimi.cn/">https://jd.simimi.cn</a></h3><ul><li>可注册登陆或游客上传，推荐注册登陆后上传 Cookie，方便自行管理，查看京东收入情况,更新添加 Cookie 等</li></ul><h3 id="QQ-群：769194788-点此入群-1"><a href="#QQ-群：769194788-点此入群-1" class="headerlink" title="QQ 群：769194788 点此入群"></a>QQ 群：769194788 <a href="https://jq.qq.com/?_wv=1027&k=mpP6nr1U">点此入群</a></h3><ul><li>请务必进群</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;获取京东 Cookie，不需要抓包软件&lt;/p&gt;
&lt;p&gt;上传 Cookie 到服务器&lt;/p&gt;
&lt;h3 id=&quot;获取到-Cookie-请到网页自行上传-https-jd-simimi-cn&quot;&gt;&lt;a href=&quot;#获取到-Cookie-请到网页自行上传-https-jd-simimi-cn&quot; class=&quot;headerlink&quot; title=&quot;获取到 Cookie 请到网页自行上传 https://jd.simimi.cn&quot;&gt;&lt;/a&gt;获取到 Cookie 请到网页自行上传 &lt;a href=&quot;https://jd.simimi.cn/&quot;&gt;https://jd.simimi.cn&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可注册登陆或游客上传，推荐注册登陆后上传 Cookie，方便自行管理，查看京东收入情况,更新添加 Cookie 等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;QQ-群：769194788-点此入群&quot;&gt;&lt;a href=&quot;#QQ-群：769194788-点此入群&quot; class=&quot;headerlink&quot; title=&quot;QQ 群：769194788 点此入群&quot;&gt;&lt;/a&gt;QQ 群：769194788 &lt;a href=&quot;https://jq.qq.com/?_wv=1027&amp;k=mpP6nr1U&quot;&gt;点此入群&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;请务必进群&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="思米米的小教程" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="教程" scheme="https://www.simimi.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="羊毛" scheme="https://www.simimi.cn/tags/%E7%BE%8A%E6%AF%9B/"/>
    
  </entry>
  
  <entry>
    <title>10个CSS小技巧</title>
    <link href="https://www.simimi.cn/note/css-10-tricks/"/>
    <id>https://www.simimi.cn/note/css-10-tricks/</id>
    <published>2022-02-10T13:22:39.000Z</published>
    <updated>2022-02-11T13:22:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个成功的Web App必须有良好的用户体验。当我们谈及改善用户体验时，你会想到什么？</p><p>其实，有一点是很容易被开发者忽视的，那就是CSS。我们可以使用一些CSS技巧来改善网页的表现形式、交互细节和可访问性。</p><p>而且这些技巧不需要花费太多时间，也不需要消耗服务器资源。你只需要花两个小时学习，然后就可以把它应用到你所有的项目中，并永远改善用户体验。</p><span id="more"></span><h2 id="可点击区域"><a href="#可点击区域" class="headerlink" title="可点击区域"></a>可点击区域</h2><p>有时你的按钮很小，这可能导致用户无法准确点击按钮。这种现象经常发生在移动端上。如果用户点击次数太多，没有点击他们想要的按钮，或者点击错误的按钮，会让他们感到非常沮丧。</p><p>那么，如何解决这个问题呢？有些开发者可能会说：把按钮做大点。</p><p>但网页中元素的大小往往是固定的，我们不能轻易调整一个元素的大小。而且如果按钮太大，感觉很奇怪。</p><p>一个更好的解决方案是在不改变按钮原始尺寸的情况下增加其可点击区域。具体来说：我们可以使用伪元素来增加一个元素的可点击区域。</p><p>例如，这里有一个按钮。</p><p><code>&lt;button id=&quot;btn&quot;&gt;btn&lt;/button&gt;</code></p><p>然后我们可以为它添加一个伪类。</p><pre class="line-numbers language-none"><code class="language-none">#btn::before &#123; content: &quot;&quot;; position: absolute; top: -20px; right: -20px; bottom: -20px; left: -20px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时，如果我们点击按钮周围的区域，我们仍然可以触发按钮的点击事件。</p><p><img src="https://image-static.segmentfault.com/288/681/2886819424-61fbdc0573521" loading="lazy"></p><p>事例地址：</p><p><a href="https://codepen.io/bytefishmedium/pen/rNYNoRX">https://codepen.io/bytefishme...</a></p><h2 id="平滑滚动"><a href="#平滑滚动" class="headerlink" title="平滑滚动"></a>平滑滚动</h2><p>当页面被<code>#</code>链接滚动时，默认效果是这样的。</p><p><img src="https://image-static.segmentfault.com/195/723/1957235309-61fbdc5eb3871" loading="lazy"></p><p>这种突然的跳跃会让人感到不舒服。为了解决这个问题，我们可以使用这个CSS样式：<code>sroll-behavior: smooth</code>。</p><p><img src="https://image-static.segmentfault.com/220/773/22077344-61fbdc8dc63c4" loading="lazy"></p><p>事例地址：<a href="https://codepen.io/bytefishmedium/pen/NWwWoKL">https://codepen.io/bytefishme...</a></p><h2 id="选择所有文本"><a href="#选择所有文本" class="headerlink" title="选择所有文本"></a>选择所有文本</h2><p>我们的网页经常需要提供一些内容供用户选择，如电话号码、地址、标题等。而这些文字应该是一个整体，我们希望当用户点击部分文字时，剩余的文字会被自动选择。</p><p><img src="https://image-static.segmentfault.com/331/165/3311656029-61fbdd15ab86f" loading="lazy"></p><p>要实现这种效果非常简单，只需使用这个CSS样式：<code>user-select: all</code> 。用户选择的CSS属性控制用户是否可以选择文本。如果它的值是 <code>all</code>，意味着一个元素的所有内容都将被原子化地选择。</p><p>事例地址：<a href="https://codepen.io/bytefishmedium/pen/xxPxMZO">https://codepen.io/bytefishme...</a></p><p>如果你想在文本被选中后添加一些额外的样式，你可以使用<code>::selection</code> 。<code>::selection</code> CSS伪元素将样式应用于文档中被用户突出显示的部分（比如在文本上点击和拖动鼠标）。</p><p>但要记住。只有某些CSS属性可以和<code>::selection</code>一起使用。</p><ul><li><code>color</code></li><li><code>background-color</code></li><li><code>text-decoration</code> 及其相关属性</li><li><code>text-shadow</code></li><li><code>stroke-color</code>, <code>fill-color</code> 和 <code>stroke-width</code></li></ul><p>事例地址：<a href="https://codepen.io/bytefishmedium/pen/gOXOqMz">https://codepen.io/bytefishme...</a></p><h2 id="Cursor"><a href="#Cursor" class="headerlink" title="Cursor"></a>Cursor</h2><p>在不同的场景下使用不同的鼠标样式可以帮助读者感知页面的当前状态，从而改善用户的互动体验。</p><p><code>cursor</code> CSS属性设置鼠标指针在一个元素上时要显示的鼠标指针（如果有的话）。</p><p>光标设置应该告知用户在当前位置可以进行的鼠标操作，包括文本选择、激活帮助或上下文菜单、复制内容、调整表格大小，等等。你可以用一个关键词来指定光标的类型，或者加载一个特定的图标来使用（有可选的回退图像和强制性的关键词作为最后的回退）。</p><p>例如：</p><p><img src="https://image-static.segmentfault.com/428/062/4280629731-61fbe2543890a" loading="lazy"></p><p>事例地址：<a href="https://codepen.io/bytefishmedium/pen/bGYGzRz">https://codepen.io/bytefishme...</a></p><p>有很多光标样式，你可以在<a href="https://link.segmentfault.com/?enc=V/otb5rq2HJW21Z3aXTpkA==.ahbw/LeOtPx8hQ7c5L/UBi6+YvNeQ+1QN3zkDsD7xtaCH7QBaaJL9bZr2BvCZRdtQnFGGVinPypVBrA1Q+/4Og==">MDN文档中</a>找到它们。</p><h2 id="Text-Overflow"><a href="#Text-Overflow" class="headerlink" title="Text Overflow"></a>Text Overflow</h2><p>现在我们来看看 text-overflow 的问题。如果一个文本容器的内容是从服务器返回的，或者是由用户输入的，那么就很难预测这个文本会有多长。</p><p>如果没有任何预防措施，你可能会写出这样的代码。</p><pre class="line-numbers language-none"><code class="language-none">&lt;head&gt;  &lt;style&gt;    .container&#123;      border: 2px solid red;      width: 200px;      height: 60px;    &#125;  &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;  &lt;div class&#x3D;&quot;container&quot;&gt;    &lt;div class&#x3D;&quot;username&quot;&gt;bytefish&lt;&#x2F;div&gt;    &lt;p class&#x3D;&quot;profile&quot;&gt;FE, UX Designer&lt;&#x2F;p&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image-static.segmentfault.com/106/600/1066002620-61fbe36d40ba7_fix732" alt="imagepng" title="image.png" loading="lazy"></p><p>这个容器有一个固定的宽度和高度，包裹着名字和介绍。</p><p>但如果有些用户的简介太长，就会导致文本溢出容器，使页面看起来很糟糕。</p><p><img src="https://image-static.segmentfault.com/199/774/199774605-61fbe3b0dd288_fix732" alt="imagepng" title="image.png" loading="lazy"></p><p>在这一点上，我们可以将溢出的文本折叠起来。做到这一点就像添加三行CSS样式一样简单。</p><pre class="line-numbers language-none"><code class="language-none">white-space: nowrap;overflow: hidden;text-overflow: ellipsis;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>white-space: nowrap</code>; 可以使文本不被包起来。然后我们使用<code>overflow: hidden</code>来隐藏溢出的文本。最后，我们使用 <code>text-overflow: ellipsis</code> 在文本的末尾添加一个圆点，向用户表明有一些隐藏的文本。</p><p><img src="https://image-static.segmentfault.com/178/308/1783085763-61fbe60313844_fix732" alt="imagepng" title="image.png" loading="lazy"></p><p>事例地址：<a href="https://codepen.io/bytefishmedium/pen/VwrwgdQ">https://codepen.io/bytefishme...</a></p><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>现在我们来讨论一下图片的风格。网络应用中使用的图片一般由后端提供。你可能已经与后端开发者达成协议，将图片保持在一个固定的尺寸。然后你写下这样的代码。</p><pre class="line-numbers language-none"><code class="language-none">&lt;title&gt;Document&lt;&#x2F;title&gt; &lt;style&gt; .img-list &#123; display: flex; flex-direction: row; list-style: none; &#125; &lt;&#x2F;style&gt;- ![](https:&#x2F;&#x2F;miro.medium.com&#x2F;fit&#x2F;c&#x2F;128&#x2F;128&#x2F;1*TyRLQdZO7NdPATwSeut8gg.png)- ![](https:&#x2F;&#x2F;miro.medium.com&#x2F;fit&#x2F;c&#x2F;128&#x2F;128&#x2F;1*pKOfOAOvx-fWzfITATgGRg.jpeg)- ![](https:&#x2F;&#x2F;miro.medium.com&#x2F;fit&#x2F;c&#x2F;128&#x2F;128&#x2F;1*mXOVdfMwS0IEcjPXiikJkg.png)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而网页看起来是这样的。</p><p><img src="https://image-static.segmentfault.com/399/107/3991076816-61fbe68c431c3_fix732" alt="imagepng" title="image.png" loading="lazy"></p><p>图片的排列与我们所期望的一样。</p><p>通常情况下是没有问题的。但是当我们写代码时，我们不能假设一切都会按照我们的预期发展。我们需要做好充分的准备。如果后端返回的图片不正常，不符合预期的尺寸，可能大也可能小，那么布局就会被打乱。</p><p>你可以用这个替换其中一张图片的链接。</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;miro.medium.com&#x2F;max&#x2F;1400&#x2F;0*zQaS0awtSTOO-JYa.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你会发现，页面突然变得杂乱无章。</p><p><img src="https://image-static.segmentfault.com/397/338/3973388868-61fbe70e24d23_fix732" alt="imagepng" title="image.png" loading="lazy"></p><p>为了防止这个问题，使我们的页面更加健壮，我们可以设置图片的宽度和高度。这样，我们就不必担心后端返回的图片的大小。</p><pre class="line-numbers language-none"><code class="language-none">img &#123; width: 128px; height: 128px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image-static.segmentfault.com/404/840/40484028-61fbe73e78a46_fix732" alt="imagepng" title="image.png" loading="lazy"></p><p>但上述写法有一个缺点：如果图像本身的长宽比与我们设定的长宽比不一致，图像将被压缩或拉伸。</p><p>为了保持图像的原始长宽比，我们可以使用 <code>object-fit: cover</code> 。</p><pre class="line-numbers language-none"><code class="language-none">img &#123; width: 128px; height: 128px; object-fit: cover;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>object-fit</code> 的CSS属性设置一个被替换的元素的内容，如<code>&lt;img&gt;</code>或<code>&lt;video&gt;</code>，应该如何调整大小以适合其容器。</p><p>如果该值是 <code>cover</code>，那么被替换的内容的大小将保持其长宽比，同时填充元素的整个内容框。如果对象的长宽比与它的盒子的长宽比不一致，那么该对象将被剪掉以适配。</p><p><img src="https://image-static.segmentfault.com/331/293/3312932221-61fbe7d740923_fix732" alt="imagepng" title="image.png" loading="lazy"></p><h2 id="无图片"><a href="#无图片" class="headerlink" title="无图片"></a>无图片</h2><p>我们之前讨论的情况都是建立在我们能够得到图片的前提下。但是，在实际应用中，可能由于后端服务的不稳定，或者用户自身的网络信号不好，我们的网页可能无法正确加载图片。</p><p>当图片缺失时，浏览器的默认样式是不优雅的，这里我们可以优化它。</p><p>我们可以给 <code>img</code>元素添加一个 <code>onerror</code> 事件。如果在加载图片时出现了错误，那么我们可以通过 <code>onerro</code>r事件给该元素添加一个样式，并使用404图片。</p><p><code>img</code> 元素:</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;miro.medium.com&#x2F;xxx.jpg&quot; alt&#x3D;&#39;fireworks picture&#39; onerror&#x3D;&quot;this.classList.add(&#39;error&#39;);&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设这就是我们的404图像:</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;cdn-images-1.medium.com&#x2F;max&#x2F;1600&#x2F;1*we8wfyztsdo12e2Cww6oVA.jpeg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://image-static.segmentfault.com/134/892/1348923011-61fbe961d4fc6_fix732" alt="imagepng" title="image.png" loading="lazy"></p><p>下面是 css 代码</p><pre class="line-numbers language-none"><code class="language-none">img.error &#123; display: inline-block; transform: scale(1); content: &#39;&#39;; color: transparent; &#125;img.error::before &#123; content: &#39;&#39;; position: absolute; left: 0; top: 0; width: 100%; height: 100%; background: #f5f5f5 url(&#39;https:&#x2F;&#x2F;cdn-images-1.medium.com&#x2F;max&#x2F;1600&#x2F;1*we8wfyztsdo12e2Cww6oVA.jpeg&#39;) no-repeat center &#x2F; 100% 100%; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，当 <code>img</code> 元素中的图片链接无法加载图片时，我们的404图片将被使用。</p><p><img src="https://image-static.segmentfault.com/197/721/1977218622-61fbe994ae109_fix732" alt="imagepng" title="image.png" loading="lazy"></p><p>这里还有一点需要优化。在这种情况下，如果原始图片没有被正确加载，用户就不知道这个图片应该是什么。为了方便用户理解，我们可以将 <code>img</code> 元素的 <code>alt</code> 属性显示在页面上。</p><pre class="line-numbers language-none"><code class="language-none">img.error::after &#123; content: attr(alt); position: absolute; left: 0; bottom: 0; width: 100%; line-height: 2; background-color: rgba(0, 0, 0, .5); color: white; font-size: 12px; text-align: center; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设img的 <code>alt</code> 属性是这样的。</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;miro.medium.com&#x2F;xxx.jpg&quot; alt&#x3D;&#39;Log of Medium&#39; &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://image-static.segmentfault.com/216/338/2163385386-61fbea7449318_fix732" alt="imagepng" title="image.png" loading="lazy"></p><p>事例地址：<a href="https://codepen.io/bytefishmedium/pen/vYWYMxG">https://codepen.io/bytefishme...</a></p><h2 id="色彩对比度"><a href="#色彩对比度" class="headerlink" title="色彩对比度"></a>色彩对比度</h2><p>当你在设计颜色组合时，你是否考虑过页面的颜色对比？</p><p>你需要知道，世界上有很多色盲和色弱用户。如果你的页面的对比度低，可能会导致他们无法正常使用你的产品。无论是出于人文关怀，还是出于留住客户的考虑，你都应该设计出合适的对比度。</p><p>WCAG AA规范指出，所有重要的内容需要有4.5:1以上的色彩对比度。</p><p>这里有一个对比度检查器的工具。</p><p><a href="https://link.segmentfault.com/?enc=h1g2nKKKf3rnywA9pg7xww==.n6cxi43OGbDRwZflZ1gzfxaHDS/GMp2jJmL2jiXPWleNlRZ82zhk116r64R6tyeX">https://webaim.org/resources/...</a></p><p>事例：</p><p><img src="https://image-static.segmentfault.com/112/429/1124293679-61fbebae6c544_fix732" alt="imagepng" title="image.png" loading="lazy"></p><p>我们也可以使用Chrome DevTool来检查一个元素的颜色对比。然后我们可以发现，Medium的网页也在实践这一原则。</p><p><img src="https://image-static.segmentfault.com/148/694/148694987-61fbebf592bc0_fix732" alt="imagepng" title="image.png" loading="lazy"></p><p><img src="https://image-static.segmentfault.com/800/839/800839036-61fbebffaaefa_fix732" alt="imagepng" title="image.png" loading="lazy"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>俗话说得好，细节决定成败。如果你的项目有很多可以改善用户体验的细节，你就可以让用户感到舒服，你就有更高的成功概率。</p><p>~完。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一个成功的Web App必须有良好的用户体验。当我们谈及改善用户体验时，你会想到什么？&lt;/p&gt;
&lt;p&gt;其实，有一点是很容易被开发者忽视的，那就是CSS。我们可以使用一些CSS技巧来改善网页的表现形式、交互细节和可访问性。&lt;/p&gt;
&lt;p&gt;而且这些技巧不需要花费太多时间，也不需要消耗服务器资源。你只需要花两个小时学习，然后就可以把它应用到你所有的项目中，并永远改善用户体验。&lt;/p&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CSS" scheme="https://www.simimi.cn/tags/CSS/"/>
    
    <category term="前端" scheme="https://www.simimi.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>【分享】Git基础教程</title>
    <link href="https://www.simimi.cn/share/git-basic-tutorial/"/>
    <id>https://www.simimi.cn/share/git-basic-tutorial/</id>
    <published>2022-02-10T12:23:18.000Z</published>
    <updated>2022-02-11T12:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>本章关于开始学习 Git。这篇文章将从介绍有关版本控制工具的一些背景知识开始，然后讲解如何在系统运行 Git，最后是关于如何设置 Git 开始工作。 通过本章的学习，了解为什么 Git 这么流行，为什么要使用 Git 以及应该如何设置以便使用 Git。</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;本章关于开始学习 Git。这篇文章将从介绍有关版本控制工具的一些背景知识开始，然后讲解如何在系统运行 Git，最后是关于如何设置 Git 开始工作。 通过本章的学习，了解为什么 Git 这么流行，为什么要使用 Git 以及应该如何设置以便使用 Git。&lt;/p&gt;</summary>
    
    
    
    <category term="思米米的小分享" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Git" scheme="https://www.simimi.cn/tags/Git/"/>
    
    <category term="分享" scheme="https://www.simimi.cn/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="教程" scheme="https://www.simimi.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>前端常用单词</title>
    <link href="https://www.simimi.cn/note/web-commom-words/"/>
    <id>https://www.simimi.cn/note/web-commom-words/</id>
    <published>2022-02-10T03:56:23.000Z</published>
    <updated>2022-02-10T04:56:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><ul><li><p>align 对齐</p></li><li><p>active 激活</p></li><li><p>absolute 绝对</p></li><li><p>alpha 图像通道</p></li><li><p>animate 动画</p></li><li><p>alert 提醒</p></li><li><p>add 加</p></li><li><p>append 添加</p></li><li><p>after 之后</p></li></ul><span id="more"></span><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><ul><li><p>back 超过范围的三次方缓动</p></li><li><p>bounce 指数衰减得反弹缓动</p></li><li><p>before 在之前</p></li><li><p>blur 当输入框失去焦点的时候触发</p></li><li><p>BOM 全称</p></li><li><p>Browser Object Model 浏览器对象模型</p></li><li><p>blur 失焦</p></li><li><p>bind 绑定</p></li><li><p>background 背景</p></li><li><p>border 边框</p></li><li><p>banner 页面是的横条</p></li><li><p>both 二者都是clear属性的一行属性值</p></li><li><p>black 黑色bottom底部，是一个css属性</p></li><li><p>blink 闪烁</p></li><li><p>box 盒子</p></li><li><p>block 块</p></li><li><p>br 换行标记</p></li><li><p>blue 蓝色</p></li><li><p>bug 软件程序中的错误</p></li><li><p>body 主体，一个HTML标记</p></li><li><p>building 建立</p></li><li><p>bold 粗体</p></li><li><p>button 按钮</p></li><li><p>break 中断</p></li><li><p>bool 布尔</p></li><li><p>bubble 冒泡</p></li></ul><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><ul><li><p>cubic 三次方的缓动</p></li><li><p>circular 圆形曲线的缓动</p></li><li><p>createElement 创建新元素</p></li><li><p>createTextNoede 创建文本节点</p></li><li><p>childNodes 返回子节点</p></li><li><p>cancelBubble 删除冒泡</p></li><li><p>click 点击事件 </p></li><li><p>change 内容发生改变，并失焦后才触发该事件</p></li><li><p>close 关闭当前页面</p></li><li><p>confirm 输入框</p></li><li><p>clientWidth 获取元素宽度</p></li><li><p>clientHeight 获取元素高度</p></li><li><p>childNodes 获取所以的子节点</p></li><li><p>chidern 返回子元素</p></li><li><p>cloneNode 复制节点</p></li><li><p>colne 克隆</p></li><li><p>chekbox 复选框</p></li><li><p>cell 表格的单元格</p></li><li><p>color 颜色</p></li><li><p>center 中间,居中</p></li><li><p>connected 连接的</p></li><li><p>contact 联系</p></li><li><p>child 孩子</p></li><li><p>content 内容</p></li><li><p>circle 圆圈</p></li><li><p>crosshaor 十字叉丝</p></li><li><p>calss 类别</p></li><li><p>css层叠样式表</p></li><li><p>clear 清除</p></li><li><p>cursor 鼠标指针</p></li><li><p>continue 继续</p></li><li><p>close 关闭</p></li><li><p>ceil 向上取整</p></li><li><p>charAt 获取某位置字符</p></li></ul><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><ul><li><p>DOM 全称 Document</p></li><li><p>Object Model 文档对象模型</p></li><li><p>default 不执行</p></li><li><p>document 文件,文档 dbclick 双击</p></li><li><p>dashed 虚线</p></li><li><p>display 显示，css的一个属性</p></li><li><p>decimal 十进制</p></li><li><p>division 分区</p></li><li><p>decoration 装饰</p></li><li><p>documen 文档</p></li><li><p>default 默认的</p></li><li><p>definition 定义</p></li><li><p>dotted 点线</p></li><li><p>double 双线</p></li><li><p>design 设计</p></li><li><p>do 做</p></li></ul><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><ul><li><p>exponential 指数曲线的缓动</p></li><li><p>elastic 指数衰减的正弦曲线缓动</p></li><li><p>error 错误 过失</p></li><li><p>element 元素</p></li><li><p>else 否则</p></li><li><p>empty 空</p></li></ul><h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><ul><li><p>font 字体</p></li><li><p>form 表单</p></li><li><p>footer 页脚</p></li><li><p>from…to 从到</p></li><li><p>first 第一</p></li><li><p>focus 焦点</p></li><li><p>fadeIn 淡入</p></li><li><p>fadeOut 淡出</p></li><li><p>find 查找</p></li><li><p>fixed 固定的</p></li><li><p>function函数，功能</p></li></ul><h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><ul><li><p>getAttribute 获取属性</p></li><li><p>gradients 渐变</p></li><li><p>gif 一种图像格式</p></li><li><p>green 绿色</p></li><li><p>gray 灰色</p></li></ul><h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><ul><li><p>history 对象</p></li><li><p>host 主机</p></li><li><p>height 高度</p></li><li><p>hover 盘旋</p></li><li><p>hidden() 隐藏</p></li><li><p>hack  常用于CSS 中的一些招数</p></li><li><p>here  这里</p></li><li><p>hand  手</p></li><li><p>hidden  被隐藏</p></li><li><p>head  头部</p></li><li><p>home  首页</p></li><li><p>height  高度</p></li><li><p>horizontal  水平的</p></li><li><p>help  帮助</p></li><li><p>hover  鼠标指针经过时的效果，或称为“悬停状态”</p></li></ul><h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><ul><li><p>input 当输入的时候实时触发</p></li><li><p>image 图像</p></li><li><p>input 输入</p></li><li><p>italic 斜体</p></li><li><p>iteration 反复</p></li><li><p>index 索引</p></li><li><p>inline  行内</p></li><li><p>important  重要的</p></li><li><p>inner  内部的</p></li><li><p>if  如果</p></li><li><p>int：整数</p></li></ul><h2 id="J"><a href="#J" class="headerlink" title="J"></a>J</h2><ul><li>justify 齐行</li></ul><h2 id="K"><a href="#K" class="headerlink" title="K"></a>K</h2><ul><li><p>keyCode 按键编码</p></li><li><p>keydown 按下按键</p></li><li><p>keyframe 关键帧</p></li><li><p>keyup 按下按键抬起</p></li></ul><h2 id="L"><a href="#L" class="headerlink" title="L"></a>L</h2><ul><li><p>link 链接</p></li><li><p>line 线,行</p></li><li><p>linear 线型的</p></li><li><p>last 最后</p></li><li><p>load 下载</p></li><li><p>last  最后一个</p></li><li><p>link  链接</p></li><li><p>left  左边</p></li><li><p>list  列表</p></li><li><p>length  长度</p></li><li><p>leave 出去</p></li><li><p>lowercase   小写</p></li><li><p>level   级别</p></li><li><p>localStorage 本地存储</p></li></ul><h2 id="M"><a href="#M" class="headerlink" title="M"></a>M</h2><ul><li><p>margin 边界</p></li><li><p>model 模型</p></li><li><p>main 主体</p></li><li><p>max 最大</p></li><li><p>min 最小</p></li><li><p>media 媒体</p></li><li><p>mouseenter 鼠标进入</p></li><li><p>mouseleave 鼠标离开</p></li></ul><h2 id="N"><a href="#N" class="headerlink" title="N"></a>N</h2><ul><li><p>navigation  导航</p></li><li><p>new 新建</p></li><li><p>normal 正常</p></li><li><p>navigation 导航</p></li><li><p>name 名字</p></li><li><p>next 下一个</p></li></ul><h2 id="O"><a href="#O" class="headerlink" title="O"></a>O</h2><ul><li><p>outerHeight 整个高度</p></li><li><p>outerWIdth 整个宽度</p></li><li><p>onUpdate 更新事件</p></li><li><p>optional  可选的</p></li><li><p>oblique  一种斜体</p></li><li><p>orange  橙色</p></li><li><p>overflow  溢出</p></li><li><p>open  打开</p></li><li><p>outline 外轮廓</p></li><li><p>origin 原点</p></li><li><p>object 对象</p></li><li><p>opacity 透明度</p></li></ul><h2 id="P"><a href="#P" class="headerlink" title="P"></a>P</h2><ul><li><p>padding 填充</p></li><li><p>position 位置</p></li><li><p>play 播放</p></li><li><p>paused 暂停</p></li><li><p>property 属性</p></li><li><p>parent 父辈</p></li><li><p>prev 上一个</p></li></ul><h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><ul><li><p>quadratic 二次方的缓动</p></li><li><p>quintic 五次方的缓动</p></li><li><p>quartic 四次方的缓动</p></li><li><p>querySelector 一个</p></li><li><p>querySelectorAll 一组</p></li></ul><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><ul><li><p>rotate 旋转</p></li><li><p>repeat 重复</p></li><li><p>right 右</p></li><li><p>relative 相对</p></li><li><p>radius 半径</p></li><li><p>red 红色</p></li><li><p>radial 放射状的</p></li><li><p>running 运行</p></li><li><p>resize 改变大小</p></li><li><p>remove 移除</p></li><li><p>ready 准备好</p></li></ul><h2 id="S"><a href="#S" class="headerlink" title="S"></a>S</h2><ul><li><p>start 开始</p></li><li><p>stop 停止</p></li><li><p>submit 提交</p></li><li><p>scroll    滚动</p></li><li><p>shadow  阴影</p></li><li><p>silver   银色</p></li><li><p>square   方块</p></li><li><p>solid  固体，实线</p></li><li><p>static  静态的</p></li><li><p>solution   方案</p></li><li><p>strong   强壮，加粗的</p></li><li><p>style  样式</p></li><li><p>span  一个HTML 标记</p></li><li><p>switch 切换</p></li><li><p>split 分割</p></li><li><p>substr 截取字符串</p></li><li><p>sqrt 取开方</p></li><li><p>status 状态</p></li><li><p>sort 排序</p></li><li><p>slice 切片，划分</p></li><li><p>splice 铰接，粘接</p></li></ul><h2 id="T"><a href="#T" class="headerlink" title="T"></a>T</h2><ul><li><p>top 顶</p></li><li><p>title 标题</p></li><li><p>text 文本</p></li><li><p>test 测试</p></li><li><p>type 类型</p></li><li><p>table 表格</p></li><li><p>transparent 透明的</p></li><li><p>transition 过渡</p></li><li><p>transform 变形</p></li><li><p>translate 转换</p></li><li><p>this 这个</p></li><li><p>toggle 切换</p></li></ul><h2 id="U"><a href="#U" class="headerlink" title="U"></a>U</h2><ul><li><p>underline  下划线</p></li><li><p>uppercase  大写</p></li><li><p>upper  上面的</p></li><li><p>url   网址</p></li></ul><h2 id="V"><a href="#V" class="headerlink" title="V"></a>V</h2><ul><li><p>vertical  竖直的</p></li><li><p>visited  访问过的</p></li><li><p>var 定义变量</p></li><li><p>vi 文件名 编辑文件</p></li><li><p>varchar 字符</p></li><li><p>video 视频</p></li></ul><h2 id="W"><a href="#W" class="headerlink" title="W"></a>W</h2><ul><li><p>wrap 包裹</p></li><li><p>white  白色</p></li><li><p>width  宽度</p></li><li><p>write 写入</p></li><li><p>watch 监控</p></li><li><p>week 星期 获取需要day</p></li><li><p>weight 加重</p></li><li><p>window 窗口</p></li></ul><p>To Be Continued.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class=&quot;headerlink&quot; title=&quot;A&quot;&gt;&lt;/a&gt;A&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;align 对齐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;active 激活&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;absolute 绝对&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;alpha 图像通道&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;animate 动画&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;alert 提醒&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;add 加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;append 添加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;after 之后&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="前端" scheme="https://www.simimi.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS 陷阱</title>
    <link href="https://www.simimi.cn/note/css-trap-note/"/>
    <id>https://www.simimi.cn/note/css-trap-note/</id>
    <published>2022-01-27T10:32:55.000Z</published>
    <updated>2022-02-03T10:32:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 的奇妙 Bug</p><!-- for codepen --><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Margin-塌陷"><a href="#Margin-塌陷" class="headerlink" title="Margin 塌陷"></a>Margin 塌陷</h3><p>DEMO: <a href="https://codepen.io/YunYouJun/pen/WqXGpo">Margin Collapse</a></p><p class="codepen" data-height="304" data-theme-id="0" data-default-tab="css,result" data-user="YunYouJun" data-slug-hash="WqXGpo" style="height: 304px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Margin Collapse">  <span>See the Pen <a href="https://codepen.io/YunYouJun/pen/WqXGpo/">  Margin Collapse</a> by YunYouJun (<a href="https://codepen.io/YunYouJun">@YunYouJun</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><span id="more"></span>#### 父子间<p>添加 <code>overflow: hidden;</code></p><h4 id="兄弟间"><a href="#兄弟间" class="headerlink" title="兄弟间"></a>兄弟间</h4><p>添加 <code>float:left;</code></p><h3 id="transform-后-z-index-属性失效"><a href="#transform-后-z-index-属性失效" class="headerlink" title="transform 后 z-index 属性失效"></a>transform 后 z-index 属性失效</h3><p>Demo:</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="css,result" data-user="YunYouJun" data-slug-hash="PowMQjP" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="transform vs z-index">  <span>See the Pen <a href="https://codepen.io/YunYouJun/pen/PowMQjP">  transform vs z-index</a> by YunYouJun (<a href="https://codepen.io/YunYouJun">@YunYouJun</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><p>原因主要是 <code>transform</code> 新创建了层叠上下文，影响了正常的 <code>z-index</code>。</p><p><strong>解决方案</strong>：添加 <code>transform-style: preserve-3d;</code>，使之变成 3d 显示方式。再通过 <code>transform: translateZ(-1px);</code> 来控制层级顺序。</p><ul><li><a href="https://link.jianshu.com/?t=http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/">张鑫旭博文：深入理解 css 中的层叠上下文和层叠顺序</a></li><li><a href="https://link.jianshu.com/?t=https://segmentfault.com/q/1010000002480824">Segmentfault 回答：Transform 引起的 z-index “失效”</a></li></ul><h3 id="img-与父级元素下边框存在空隙"><a href="#img-与父级元素下边框存在空隙" class="headerlink" title="img 与父级元素下边框存在空隙"></a>img 与父级元素下边框存在空隙</h3><p>Demo:</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="html,result" data-user="YunYouJun" data-slug-hash="dyPxmGY" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="img space with father">  <span>See the Pen <a href="https://codepen.io/YunYouJun/pen/dyPxmGY">  img space with father</a> by YunYouJun (<a href="https://codepen.io/YunYouJun">@YunYouJun</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><p>可以看到在底部，背景的红色透了出来。<br>其主要原因是文字默认的行高所产生的问题。（参见 demo）</p><p><strong>解决方案</strong>：默认的 <code>vertical-align</code> 属性为 <code>baseline</code>，我们只需要为 <code>img</code> 添加 <code>vertical-align: bottom</code> （<code>middle | top | bottom</code> 都可以）。</p><blockquote><p><a href="https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/">CSS 深入理解 vertical-align 和 line-height 的基友关系</a></p></blockquote><hr><p>To Be Continued.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CSS 的奇妙 Bug&lt;/p&gt;
&lt;!-- for codepen --&gt;
&lt;script async src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;FAQ&quot;&gt;&lt;a href=&quot;#FAQ&quot; class=&quot;headerlink&quot; title=&quot;FAQ&quot;&gt;&lt;/a&gt;FAQ&lt;/h2&gt;&lt;h3 id=&quot;Margin-塌陷&quot;&gt;&lt;a href=&quot;#Margin-塌陷&quot; class=&quot;headerlink&quot; title=&quot;Margin 塌陷&quot;&gt;&lt;/a&gt;Margin 塌陷&lt;/h3&gt;&lt;p&gt;DEMO: &lt;a href=&quot;https://codepen.io/YunYouJun/pen/WqXGpo&quot;&gt;Margin Collapse&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;304&quot; data-theme-id=&quot;0&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;YunYouJun&quot; data-slug-hash=&quot;WqXGpo&quot; style=&quot;height: 304px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Margin Collapse&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/YunYouJun/pen/WqXGpo/&quot;&gt;
  Margin Collapse&lt;/a&gt; by YunYouJun (&lt;a href=&quot;https://codepen.io/YunYouJun&quot;&gt;@YunYouJun&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;</summary>
    
    
    
    <category term="思米米的小笔记" scheme="https://www.simimi.cn/categories/%E6%80%9D%E7%B1%B3%E7%B1%B3%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CSS" scheme="https://www.simimi.cn/tags/CSS/"/>
    
    <category term="学习" scheme="https://www.simimi.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="https://www.simimi.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
