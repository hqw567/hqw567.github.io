/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[...path]': RouteRecordInfo<'/[...path]', '/:path(.*)', { path: ParamValue<true> }, { path: ParamValue<false> }>,
    '/404': RouteRecordInfo<'/404', '/404', Record<never, never>, Record<never, never>>,
    '/about/': RouteRecordInfo<'/about/', '/about', Record<never, never>, Record<never, never>>,
    '/about/site': RouteRecordInfo<'/about/site', '/about/site', Record<never, never>, Record<never, never>>,
    '/archives/': RouteRecordInfo<'/archives/', '/archives', Record<never, never>, Record<never, never>>,
    '/categories/': RouteRecordInfo<'/categories/', '/categories', Record<never, never>, Record<never, never>>,
    '/links/': RouteRecordInfo<'/links/', '/links', Record<never, never>, Record<never, never>>,
    '/page/[page]': RouteRecordInfo<'/page/[page]', '/page/:page', { page: ParamValue<true> }, { page: ParamValue<false> }>,
    '/posts/babel-es6-es5': RouteRecordInfo<'/posts/babel-es6-es5', '/posts/babel-es6-es5', Record<never, never>, Record<never, never>>,
    '/posts/cfw-tun': RouteRecordInfo<'/posts/cfw-tun', '/posts/cfw-tun', Record<never, never>, Record<never, never>>,
    '/posts/css-10-tricks': RouteRecordInfo<'/posts/css-10-tricks', '/posts/css-10-tricks', Record<never, never>, Record<never, never>>,
    '/posts/css-font': RouteRecordInfo<'/posts/css-font', '/posts/css-font', Record<never, never>, Record<never, never>>,
    '/posts/css-name': RouteRecordInfo<'/posts/css-name', '/posts/css-name', Record<never, never>, Record<never, never>>,
    '/posts/css-norm': RouteRecordInfo<'/posts/css-norm', '/posts/css-norm', Record<never, never>, Record<never, never>>,
    '/posts/git-basic-tutorial': RouteRecordInfo<'/posts/git-basic-tutorial', '/posts/git-basic-tutorial', Record<never, never>, Record<never, never>>,
    '/posts/git-learn-note': RouteRecordInfo<'/posts/git-learn-note', '/posts/git-learn-note', Record<never, never>, Record<never, never>>,
    '/posts/git-listing': RouteRecordInfo<'/posts/git-listing', '/posts/git-listing', Record<never, never>, Record<never, never>>,
    '/posts/git-npm-proxy': RouteRecordInfo<'/posts/git-npm-proxy', '/posts/git-npm-proxy', Record<never, never>, Record<never, never>>,
    '/posts/jdcookie': RouteRecordInfo<'/posts/jdcookie', '/posts/jdcookie', Record<never, never>, Record<never, never>>,
    '/posts/js-copy-clipboard-api': RouteRecordInfo<'/posts/js-copy-clipboard-api', '/posts/js-copy-clipboard-api', Record<never, never>, Record<never, never>>,
    '/posts/js-echarts': RouteRecordInfo<'/posts/js-echarts', '/posts/js-echarts', Record<never, never>, Record<never, never>>,
    '/posts/js-es6': RouteRecordInfo<'/posts/js-es6', '/posts/js-es6', Record<never, never>, Record<never, never>>,
    '/posts/js-ismobile': RouteRecordInfo<'/posts/js-ismobile', '/posts/js-ismobile', Record<never, never>, Record<never, never>>,
    '/posts/js-nocopy': RouteRecordInfo<'/posts/js-nocopy', '/posts/js-nocopy', Record<never, never>, Record<never, never>>,
    '/posts/js-skills': RouteRecordInfo<'/posts/js-skills', '/posts/js-skills', Record<never, never>, Record<never, never>>,
    '/posts/js-this-principle': RouteRecordInfo<'/posts/js-this-principle', '/posts/js-this-principle', Record<never, never>, Record<never, never>>,
    '/posts/markdown-basic-syntax': RouteRecordInfo<'/posts/markdown-basic-syntax', '/posts/markdown-basic-syntax', Record<never, never>, Record<never, never>>,
    '/posts/prettierrc-config': RouteRecordInfo<'/posts/prettierrc-config', '/posts/prettierrc-config', Record<never, never>, Record<never, never>>,
    '/posts/proxy-tools': RouteRecordInfo<'/posts/proxy-tools', '/posts/proxy-tools', Record<never, never>, Record<never, never>>,
    '/posts/proxy-v2ray': RouteRecordInfo<'/posts/proxy-v2ray', '/posts/proxy-v2ray', Record<never, never>, Record<never, never>>,
    '/posts/ql-jd': RouteRecordInfo<'/posts/ql-jd', '/posts/ql-jd', Record<never, never>, Record<never, never>>,
    '/posts/web-commom-words': RouteRecordInfo<'/posts/web-commom-words', '/posts/web-commom-words', Record<never, never>, Record<never, never>>,
    '/posts/web-norm': RouteRecordInfo<'/posts/web-norm', '/posts/web-norm', Record<never, never>, Record<never, never>>,
    '/resume/': RouteRecordInfo<'/resume/', '/resume', Record<never, never>, Record<never, never>>,
    '/tags/': RouteRecordInfo<'/tags/', '/tags', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
